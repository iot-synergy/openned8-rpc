// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
	"github.com/iot-synergy/openned8-rpc/ent/sdkusage"
)

// SdkUsageUpdate is the builder for updating SdkUsage entities.
type SdkUsageUpdate struct {
	config
	hooks    []Hook
	mutation *SdkUsageMutation
}

// Where appends a list predicates to the SdkUsageUpdate builder.
func (suu *SdkUsageUpdate) Where(ps ...predicate.SdkUsage) *SdkUsageUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *SdkUsageUpdate) SetUpdatedAt(t time.Time) *SdkUsageUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetUserID sets the "user_id" field.
func (suu *SdkUsageUpdate) SetUserID(s string) *SdkUsageUpdate {
	suu.mutation.SetUserID(s)
	return suu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suu *SdkUsageUpdate) SetNillableUserID(s *string) *SdkUsageUpdate {
	if s != nil {
		suu.SetUserID(*s)
	}
	return suu
}

// SetAll sets the "all" field.
func (suu *SdkUsageUpdate) SetAll(i int64) *SdkUsageUpdate {
	suu.mutation.ResetAll()
	suu.mutation.SetAll(i)
	return suu
}

// SetNillableAll sets the "all" field if the given value is not nil.
func (suu *SdkUsageUpdate) SetNillableAll(i *int64) *SdkUsageUpdate {
	if i != nil {
		suu.SetAll(*i)
	}
	return suu
}

// AddAll adds i to the "all" field.
func (suu *SdkUsageUpdate) AddAll(i int64) *SdkUsageUpdate {
	suu.mutation.AddAll(i)
	return suu
}

// SetUsed sets the "used" field.
func (suu *SdkUsageUpdate) SetUsed(i int64) *SdkUsageUpdate {
	suu.mutation.ResetUsed()
	suu.mutation.SetUsed(i)
	return suu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (suu *SdkUsageUpdate) SetNillableUsed(i *int64) *SdkUsageUpdate {
	if i != nil {
		suu.SetUsed(*i)
	}
	return suu
}

// AddUsed adds i to the "used" field.
func (suu *SdkUsageUpdate) AddUsed(i int64) *SdkUsageUpdate {
	suu.mutation.AddUsed(i)
	return suu
}

// Mutation returns the SdkUsageMutation object of the builder.
func (suu *SdkUsageUpdate) Mutation() *SdkUsageMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SdkUsageUpdate) Save(ctx context.Context) (int, error) {
	suu.defaults()
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SdkUsageUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SdkUsageUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SdkUsageUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *SdkUsageUpdate) defaults() {
	if _, ok := suu.mutation.UpdatedAt(); !ok {
		v := sdkusage.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
}

func (suu *SdkUsageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sdkusage.Table, sdkusage.Columns, sqlgraph.NewFieldSpec(sdkusage.FieldID, field.TypeUUID))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.SetField(sdkusage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suu.mutation.UserID(); ok {
		_spec.SetField(sdkusage.FieldUserID, field.TypeString, value)
	}
	if value, ok := suu.mutation.All(); ok {
		_spec.SetField(sdkusage.FieldAll, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedAll(); ok {
		_spec.AddField(sdkusage.FieldAll, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.Used(); ok {
		_spec.SetField(sdkusage.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedUsed(); ok {
		_spec.AddField(sdkusage.FieldUsed, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sdkusage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// SdkUsageUpdateOne is the builder for updating a single SdkUsage entity.
type SdkUsageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SdkUsageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *SdkUsageUpdateOne) SetUpdatedAt(t time.Time) *SdkUsageUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetUserID sets the "user_id" field.
func (suuo *SdkUsageUpdateOne) SetUserID(s string) *SdkUsageUpdateOne {
	suuo.mutation.SetUserID(s)
	return suuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suuo *SdkUsageUpdateOne) SetNillableUserID(s *string) *SdkUsageUpdateOne {
	if s != nil {
		suuo.SetUserID(*s)
	}
	return suuo
}

// SetAll sets the "all" field.
func (suuo *SdkUsageUpdateOne) SetAll(i int64) *SdkUsageUpdateOne {
	suuo.mutation.ResetAll()
	suuo.mutation.SetAll(i)
	return suuo
}

// SetNillableAll sets the "all" field if the given value is not nil.
func (suuo *SdkUsageUpdateOne) SetNillableAll(i *int64) *SdkUsageUpdateOne {
	if i != nil {
		suuo.SetAll(*i)
	}
	return suuo
}

// AddAll adds i to the "all" field.
func (suuo *SdkUsageUpdateOne) AddAll(i int64) *SdkUsageUpdateOne {
	suuo.mutation.AddAll(i)
	return suuo
}

// SetUsed sets the "used" field.
func (suuo *SdkUsageUpdateOne) SetUsed(i int64) *SdkUsageUpdateOne {
	suuo.mutation.ResetUsed()
	suuo.mutation.SetUsed(i)
	return suuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (suuo *SdkUsageUpdateOne) SetNillableUsed(i *int64) *SdkUsageUpdateOne {
	if i != nil {
		suuo.SetUsed(*i)
	}
	return suuo
}

// AddUsed adds i to the "used" field.
func (suuo *SdkUsageUpdateOne) AddUsed(i int64) *SdkUsageUpdateOne {
	suuo.mutation.AddUsed(i)
	return suuo
}

// Mutation returns the SdkUsageMutation object of the builder.
func (suuo *SdkUsageUpdateOne) Mutation() *SdkUsageMutation {
	return suuo.mutation
}

// Where appends a list predicates to the SdkUsageUpdate builder.
func (suuo *SdkUsageUpdateOne) Where(ps ...predicate.SdkUsage) *SdkUsageUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SdkUsageUpdateOne) Select(field string, fields ...string) *SdkUsageUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SdkUsage entity.
func (suuo *SdkUsageUpdateOne) Save(ctx context.Context) (*SdkUsage, error) {
	suuo.defaults()
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SdkUsageUpdateOne) SaveX(ctx context.Context) *SdkUsage {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SdkUsageUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SdkUsageUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *SdkUsageUpdateOne) defaults() {
	if _, ok := suuo.mutation.UpdatedAt(); !ok {
		v := sdkusage.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
}

func (suuo *SdkUsageUpdateOne) sqlSave(ctx context.Context) (_node *SdkUsage, err error) {
	_spec := sqlgraph.NewUpdateSpec(sdkusage.Table, sdkusage.Columns, sqlgraph.NewFieldSpec(sdkusage.FieldID, field.TypeUUID))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SdkUsage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sdkusage.FieldID)
		for _, f := range fields {
			if !sdkusage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sdkusage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sdkusage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suuo.mutation.UserID(); ok {
		_spec.SetField(sdkusage.FieldUserID, field.TypeString, value)
	}
	if value, ok := suuo.mutation.All(); ok {
		_spec.SetField(sdkusage.FieldAll, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedAll(); ok {
		_spec.AddField(sdkusage.FieldAll, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.Used(); ok {
		_spec.SetField(sdkusage.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedUsed(); ok {
		_spec.AddField(sdkusage.FieldUsed, field.TypeInt64, value)
	}
	_node = &SdkUsage{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sdkusage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
