// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
	"github.com/iot-synergy/openned8-rpc/ent/sdkinfo"
)

// SdkInfoUpdate is the builder for updating SdkInfo entities.
type SdkInfoUpdate struct {
	config
	hooks    []Hook
	mutation *SdkInfoMutation
}

// Where appends a list predicates to the SdkInfoUpdate builder.
func (siu *SdkInfoUpdate) Where(ps ...predicate.SdkInfo) *SdkInfoUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetUpdatedAt sets the "updated_at" field.
func (siu *SdkInfoUpdate) SetUpdatedAt(t time.Time) *SdkInfoUpdate {
	siu.mutation.SetUpdatedAt(t)
	return siu
}

// SetName sets the "name" field.
func (siu *SdkInfoUpdate) SetName(s string) *SdkInfoUpdate {
	siu.mutation.SetName(s)
	return siu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siu *SdkInfoUpdate) SetNillableName(s *string) *SdkInfoUpdate {
	if s != nil {
		siu.SetName(*s)
	}
	return siu
}

// SetAvatar sets the "avatar" field.
func (siu *SdkInfoUpdate) SetAvatar(s string) *SdkInfoUpdate {
	siu.mutation.SetAvatar(s)
	return siu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (siu *SdkInfoUpdate) SetNillableAvatar(s *string) *SdkInfoUpdate {
	if s != nil {
		siu.SetAvatar(*s)
	}
	return siu
}

// SetDesc sets the "desc" field.
func (siu *SdkInfoUpdate) SetDesc(i int64) *SdkInfoUpdate {
	siu.mutation.ResetDesc()
	siu.mutation.SetDesc(i)
	return siu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (siu *SdkInfoUpdate) SetNillableDesc(i *int64) *SdkInfoUpdate {
	if i != nil {
		siu.SetDesc(*i)
	}
	return siu
}

// AddDesc adds i to the "desc" field.
func (siu *SdkInfoUpdate) AddDesc(i int64) *SdkInfoUpdate {
	siu.mutation.AddDesc(i)
	return siu
}

// SetDownloadURL sets the "download_url" field.
func (siu *SdkInfoUpdate) SetDownloadURL(s string) *SdkInfoUpdate {
	siu.mutation.SetDownloadURL(s)
	return siu
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (siu *SdkInfoUpdate) SetNillableDownloadURL(s *string) *SdkInfoUpdate {
	if s != nil {
		siu.SetDownloadURL(*s)
	}
	return siu
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by IDs.
func (siu *SdkInfoUpdate) AddAppSdkIDs(ids ...uuid.UUID) *SdkInfoUpdate {
	siu.mutation.AddAppSdkIDs(ids...)
	return siu
}

// AddAppSdk adds the "app_sdk" edges to the AppSdk entity.
func (siu *SdkInfoUpdate) AddAppSdk(a ...*AppSdk) *SdkInfoUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return siu.AddAppSdkIDs(ids...)
}

// Mutation returns the SdkInfoMutation object of the builder.
func (siu *SdkInfoUpdate) Mutation() *SdkInfoMutation {
	return siu.mutation
}

// ClearAppSdk clears all "app_sdk" edges to the AppSdk entity.
func (siu *SdkInfoUpdate) ClearAppSdk() *SdkInfoUpdate {
	siu.mutation.ClearAppSdk()
	return siu
}

// RemoveAppSdkIDs removes the "app_sdk" edge to AppSdk entities by IDs.
func (siu *SdkInfoUpdate) RemoveAppSdkIDs(ids ...uuid.UUID) *SdkInfoUpdate {
	siu.mutation.RemoveAppSdkIDs(ids...)
	return siu
}

// RemoveAppSdk removes "app_sdk" edges to AppSdk entities.
func (siu *SdkInfoUpdate) RemoveAppSdk(a ...*AppSdk) *SdkInfoUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return siu.RemoveAppSdkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *SdkInfoUpdate) Save(ctx context.Context) (int, error) {
	siu.defaults()
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *SdkInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *SdkInfoUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *SdkInfoUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *SdkInfoUpdate) defaults() {
	if _, ok := siu.mutation.UpdatedAt(); !ok {
		v := sdkinfo.UpdateDefaultUpdatedAt()
		siu.mutation.SetUpdatedAt(v)
	}
}

func (siu *SdkInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sdkinfo.Table, sdkinfo.Columns, sqlgraph.NewFieldSpec(sdkinfo.FieldID, field.TypeUUID))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdatedAt(); ok {
		_spec.SetField(sdkinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siu.mutation.Name(); ok {
		_spec.SetField(sdkinfo.FieldName, field.TypeString, value)
	}
	if value, ok := siu.mutation.Avatar(); ok {
		_spec.SetField(sdkinfo.FieldAvatar, field.TypeString, value)
	}
	if value, ok := siu.mutation.Desc(); ok {
		_spec.SetField(sdkinfo.FieldDesc, field.TypeInt64, value)
	}
	if value, ok := siu.mutation.AddedDesc(); ok {
		_spec.AddField(sdkinfo.FieldDesc, field.TypeInt64, value)
	}
	if value, ok := siu.mutation.DownloadURL(); ok {
		_spec.SetField(sdkinfo.FieldDownloadURL, field.TypeString, value)
	}
	if siu.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sdkinfo.AppSdkTable,
			Columns: []string{sdkinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedAppSdkIDs(); len(nodes) > 0 && !siu.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sdkinfo.AppSdkTable,
			Columns: []string{sdkinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sdkinfo.AppSdkTable,
			Columns: []string{sdkinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sdkinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// SdkInfoUpdateOne is the builder for updating a single SdkInfo entity.
type SdkInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SdkInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (siuo *SdkInfoUpdateOne) SetUpdatedAt(t time.Time) *SdkInfoUpdateOne {
	siuo.mutation.SetUpdatedAt(t)
	return siuo
}

// SetName sets the "name" field.
func (siuo *SdkInfoUpdateOne) SetName(s string) *SdkInfoUpdateOne {
	siuo.mutation.SetName(s)
	return siuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siuo *SdkInfoUpdateOne) SetNillableName(s *string) *SdkInfoUpdateOne {
	if s != nil {
		siuo.SetName(*s)
	}
	return siuo
}

// SetAvatar sets the "avatar" field.
func (siuo *SdkInfoUpdateOne) SetAvatar(s string) *SdkInfoUpdateOne {
	siuo.mutation.SetAvatar(s)
	return siuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (siuo *SdkInfoUpdateOne) SetNillableAvatar(s *string) *SdkInfoUpdateOne {
	if s != nil {
		siuo.SetAvatar(*s)
	}
	return siuo
}

// SetDesc sets the "desc" field.
func (siuo *SdkInfoUpdateOne) SetDesc(i int64) *SdkInfoUpdateOne {
	siuo.mutation.ResetDesc()
	siuo.mutation.SetDesc(i)
	return siuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (siuo *SdkInfoUpdateOne) SetNillableDesc(i *int64) *SdkInfoUpdateOne {
	if i != nil {
		siuo.SetDesc(*i)
	}
	return siuo
}

// AddDesc adds i to the "desc" field.
func (siuo *SdkInfoUpdateOne) AddDesc(i int64) *SdkInfoUpdateOne {
	siuo.mutation.AddDesc(i)
	return siuo
}

// SetDownloadURL sets the "download_url" field.
func (siuo *SdkInfoUpdateOne) SetDownloadURL(s string) *SdkInfoUpdateOne {
	siuo.mutation.SetDownloadURL(s)
	return siuo
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (siuo *SdkInfoUpdateOne) SetNillableDownloadURL(s *string) *SdkInfoUpdateOne {
	if s != nil {
		siuo.SetDownloadURL(*s)
	}
	return siuo
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by IDs.
func (siuo *SdkInfoUpdateOne) AddAppSdkIDs(ids ...uuid.UUID) *SdkInfoUpdateOne {
	siuo.mutation.AddAppSdkIDs(ids...)
	return siuo
}

// AddAppSdk adds the "app_sdk" edges to the AppSdk entity.
func (siuo *SdkInfoUpdateOne) AddAppSdk(a ...*AppSdk) *SdkInfoUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return siuo.AddAppSdkIDs(ids...)
}

// Mutation returns the SdkInfoMutation object of the builder.
func (siuo *SdkInfoUpdateOne) Mutation() *SdkInfoMutation {
	return siuo.mutation
}

// ClearAppSdk clears all "app_sdk" edges to the AppSdk entity.
func (siuo *SdkInfoUpdateOne) ClearAppSdk() *SdkInfoUpdateOne {
	siuo.mutation.ClearAppSdk()
	return siuo
}

// RemoveAppSdkIDs removes the "app_sdk" edge to AppSdk entities by IDs.
func (siuo *SdkInfoUpdateOne) RemoveAppSdkIDs(ids ...uuid.UUID) *SdkInfoUpdateOne {
	siuo.mutation.RemoveAppSdkIDs(ids...)
	return siuo
}

// RemoveAppSdk removes "app_sdk" edges to AppSdk entities.
func (siuo *SdkInfoUpdateOne) RemoveAppSdk(a ...*AppSdk) *SdkInfoUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return siuo.RemoveAppSdkIDs(ids...)
}

// Where appends a list predicates to the SdkInfoUpdate builder.
func (siuo *SdkInfoUpdateOne) Where(ps ...predicate.SdkInfo) *SdkInfoUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *SdkInfoUpdateOne) Select(field string, fields ...string) *SdkInfoUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated SdkInfo entity.
func (siuo *SdkInfoUpdateOne) Save(ctx context.Context) (*SdkInfo, error) {
	siuo.defaults()
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *SdkInfoUpdateOne) SaveX(ctx context.Context) *SdkInfo {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *SdkInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *SdkInfoUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *SdkInfoUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdatedAt(); !ok {
		v := sdkinfo.UpdateDefaultUpdatedAt()
		siuo.mutation.SetUpdatedAt(v)
	}
}

func (siuo *SdkInfoUpdateOne) sqlSave(ctx context.Context) (_node *SdkInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(sdkinfo.Table, sdkinfo.Columns, sqlgraph.NewFieldSpec(sdkinfo.FieldID, field.TypeUUID))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SdkInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sdkinfo.FieldID)
		for _, f := range fields {
			if !sdkinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sdkinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sdkinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.Name(); ok {
		_spec.SetField(sdkinfo.FieldName, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Avatar(); ok {
		_spec.SetField(sdkinfo.FieldAvatar, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Desc(); ok {
		_spec.SetField(sdkinfo.FieldDesc, field.TypeInt64, value)
	}
	if value, ok := siuo.mutation.AddedDesc(); ok {
		_spec.AddField(sdkinfo.FieldDesc, field.TypeInt64, value)
	}
	if value, ok := siuo.mutation.DownloadURL(); ok {
		_spec.SetField(sdkinfo.FieldDownloadURL, field.TypeString, value)
	}
	if siuo.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sdkinfo.AppSdkTable,
			Columns: []string{sdkinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedAppSdkIDs(); len(nodes) > 0 && !siuo.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sdkinfo.AppSdkTable,
			Columns: []string{sdkinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sdkinfo.AppSdkTable,
			Columns: []string{sdkinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SdkInfo{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sdkinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
