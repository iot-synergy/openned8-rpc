// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
)

// AppInfo is the model entity for the AppInfo schema.
type AppInfo struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 用户id
	UserID string `json:"user_id,omitempty"`
	// app名字
	AppName string `json:"app_name,omitempty"`
	// 摘要
	Summary string `json:"summary,omitempty"`
	// 种类
	AppCategory int64 `json:"app_category,omitempty"`
	// 使用领域
	UseIndustry int64 `json:"use_industry,omitempty"`
	// 种类名字
	AppCategoryName string `json:"app_category_name,omitempty"`
	// 使用领域名字
	UseIndustryName string `json:"use_industry_name,omitempty"`
	// 钥匙
	AppKey string `json:"app_key,omitempty"`
	// 秘密
	AppSecret string `json:"app_secret,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppInfoQuery when eager-loading is set.
	Edges        AppInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppInfoEdges holds the relations/edges for other nodes in the graph.
type AppInfoEdges struct {
	// AppSdk holds the value of the app_sdk edge.
	AppSdk []*AppSdk `json:"app_sdk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppSdkOrErr returns the AppSdk value or an error if the edge
// was not loaded in eager-loading.
func (e AppInfoEdges) AppSdkOrErr() ([]*AppSdk, error) {
	if e.loadedTypes[0] {
		return e.AppSdk, nil
	}
	return nil, &NotLoadedError{edge: "app_sdk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appinfo.FieldAppCategory, appinfo.FieldUseIndustry:
			values[i] = new(sql.NullInt64)
		case appinfo.FieldUserID, appinfo.FieldAppName, appinfo.FieldSummary, appinfo.FieldAppCategoryName, appinfo.FieldUseIndustryName, appinfo.FieldAppKey, appinfo.FieldAppSecret:
			values[i] = new(sql.NullString)
		case appinfo.FieldCreatedAt, appinfo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case appinfo.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppInfo fields.
func (ai *AppInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appinfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ai.ID = *value
			}
		case appinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case appinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		case appinfo.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ai.UserID = value.String
			}
		case appinfo.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				ai.AppName = value.String
			}
		case appinfo.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				ai.Summary = value.String
			}
		case appinfo.FieldAppCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_category", values[i])
			} else if value.Valid {
				ai.AppCategory = value.Int64
			}
		case appinfo.FieldUseIndustry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_industry", values[i])
			} else if value.Valid {
				ai.UseIndustry = value.Int64
			}
		case appinfo.FieldAppCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_category_name", values[i])
			} else if value.Valid {
				ai.AppCategoryName = value.String
			}
		case appinfo.FieldUseIndustryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_industry_name", values[i])
			} else if value.Valid {
				ai.UseIndustryName = value.String
			}
		case appinfo.FieldAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_key", values[i])
			} else if value.Valid {
				ai.AppKey = value.String
			}
		case appinfo.FieldAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_secret", values[i])
			} else if value.Valid {
				ai.AppSecret = value.String
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppInfo.
// This includes values selected through modifiers, order, etc.
func (ai *AppInfo) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryAppSdk queries the "app_sdk" edge of the AppInfo entity.
func (ai *AppInfo) QueryAppSdk() *AppSdkQuery {
	return NewAppInfoClient(ai.config).QueryAppSdk(ai)
}

// Update returns a builder for updating this AppInfo.
// Note that you need to call AppInfo.Unwrap() before calling this method if this AppInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AppInfo) Update() *AppInfoUpdateOne {
	return NewAppInfoClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AppInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AppInfo) Unwrap() *AppInfo {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppInfo is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AppInfo) String() string {
	var builder strings.Builder
	builder.WriteString("AppInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ai.UserID)
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(ai.AppName)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(ai.Summary)
	builder.WriteString(", ")
	builder.WriteString("app_category=")
	builder.WriteString(fmt.Sprintf("%v", ai.AppCategory))
	builder.WriteString(", ")
	builder.WriteString("use_industry=")
	builder.WriteString(fmt.Sprintf("%v", ai.UseIndustry))
	builder.WriteString(", ")
	builder.WriteString("app_category_name=")
	builder.WriteString(ai.AppCategoryName)
	builder.WriteString(", ")
	builder.WriteString("use_industry_name=")
	builder.WriteString(ai.UseIndustryName)
	builder.WriteString(", ")
	builder.WriteString("app_key=")
	builder.WriteString(ai.AppKey)
	builder.WriteString(", ")
	builder.WriteString("app_secret=")
	builder.WriteString(ai.AppSecret)
	builder.WriteByte(')')
	return builder.String()
}

// AppInfos is a parsable slice of AppInfo.
type AppInfos []*AppInfo
