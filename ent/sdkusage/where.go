// Code generated by ent, DO NOT EDIT.

package sdkusage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldUserID, v))
}

// All applies equality check predicate on the "all" field. It's identical to AllEQ.
func All(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldAll, v))
}

// Used applies equality check predicate on the "used" field. It's identical to UsedEQ.
func Used(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldUsed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldContainsFold(FieldUserID, v))
}

// AllEQ applies the EQ predicate on the "all" field.
func AllEQ(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldAll, v))
}

// AllNEQ applies the NEQ predicate on the "all" field.
func AllNEQ(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNEQ(FieldAll, v))
}

// AllIn applies the In predicate on the "all" field.
func AllIn(vs ...int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldIn(FieldAll, vs...))
}

// AllNotIn applies the NotIn predicate on the "all" field.
func AllNotIn(vs ...int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNotIn(FieldAll, vs...))
}

// AllGT applies the GT predicate on the "all" field.
func AllGT(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGT(FieldAll, v))
}

// AllGTE applies the GTE predicate on the "all" field.
func AllGTE(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGTE(FieldAll, v))
}

// AllLT applies the LT predicate on the "all" field.
func AllLT(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLT(FieldAll, v))
}

// AllLTE applies the LTE predicate on the "all" field.
func AllLTE(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLTE(FieldAll, v))
}

// UsedEQ applies the EQ predicate on the "used" field.
func UsedEQ(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldEQ(FieldUsed, v))
}

// UsedNEQ applies the NEQ predicate on the "used" field.
func UsedNEQ(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNEQ(FieldUsed, v))
}

// UsedIn applies the In predicate on the "used" field.
func UsedIn(vs ...int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldIn(FieldUsed, vs...))
}

// UsedNotIn applies the NotIn predicate on the "used" field.
func UsedNotIn(vs ...int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldNotIn(FieldUsed, vs...))
}

// UsedGT applies the GT predicate on the "used" field.
func UsedGT(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGT(FieldUsed, v))
}

// UsedGTE applies the GTE predicate on the "used" field.
func UsedGTE(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldGTE(FieldUsed, v))
}

// UsedLT applies the LT predicate on the "used" field.
func UsedLT(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLT(FieldUsed, v))
}

// UsedLTE applies the LTE predicate on the "used" field.
func UsedLTE(v int64) predicate.SdkUsage {
	return predicate.SdkUsage(sql.FieldLTE(FieldUsed, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SdkUsage) predicate.SdkUsage {
	return predicate.SdkUsage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SdkUsage) predicate.SdkUsage {
	return predicate.SdkUsage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SdkUsage) predicate.SdkUsage {
	return predicate.SdkUsage(sql.NotPredicates(p))
}
