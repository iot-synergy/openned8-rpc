// Code generated by ent, DO NOT EDIT.

package sdkinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldName, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldAvatar, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldDesc, v))
}

// DownloadURL applies equality check predicate on the "download_url" field. It's identical to DownloadURLEQ.
func DownloadURL(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldDownloadURL, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldLanguage, v))
}

// LanguageID applies equality check predicate on the "language_id" field. It's identical to LanguageIDEQ.
func LanguageID(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldLanguageID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldName, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldAvatar, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldDesc, v))
}

// DownloadURLEQ applies the EQ predicate on the "download_url" field.
func DownloadURLEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldDownloadURL, v))
}

// DownloadURLNEQ applies the NEQ predicate on the "download_url" field.
func DownloadURLNEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldDownloadURL, v))
}

// DownloadURLIn applies the In predicate on the "download_url" field.
func DownloadURLIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldDownloadURL, vs...))
}

// DownloadURLNotIn applies the NotIn predicate on the "download_url" field.
func DownloadURLNotIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldDownloadURL, vs...))
}

// DownloadURLGT applies the GT predicate on the "download_url" field.
func DownloadURLGT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldDownloadURL, v))
}

// DownloadURLGTE applies the GTE predicate on the "download_url" field.
func DownloadURLGTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldDownloadURL, v))
}

// DownloadURLLT applies the LT predicate on the "download_url" field.
func DownloadURLLT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldDownloadURL, v))
}

// DownloadURLLTE applies the LTE predicate on the "download_url" field.
func DownloadURLLTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldDownloadURL, v))
}

// DownloadURLContains applies the Contains predicate on the "download_url" field.
func DownloadURLContains(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContains(FieldDownloadURL, v))
}

// DownloadURLHasPrefix applies the HasPrefix predicate on the "download_url" field.
func DownloadURLHasPrefix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasPrefix(FieldDownloadURL, v))
}

// DownloadURLHasSuffix applies the HasSuffix predicate on the "download_url" field.
func DownloadURLHasSuffix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasSuffix(FieldDownloadURL, v))
}

// DownloadURLEqualFold applies the EqualFold predicate on the "download_url" field.
func DownloadURLEqualFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldDownloadURL, v))
}

// DownloadURLContainsFold applies the ContainsFold predicate on the "download_url" field.
func DownloadURLContainsFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldDownloadURL, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldLanguage, v))
}

// LanguageIDEQ applies the EQ predicate on the "language_id" field.
func LanguageIDEQ(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldLanguageID, v))
}

// LanguageIDNEQ applies the NEQ predicate on the "language_id" field.
func LanguageIDNEQ(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldLanguageID, v))
}

// LanguageIDIn applies the In predicate on the "language_id" field.
func LanguageIDIn(vs ...int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldLanguageID, vs...))
}

// LanguageIDNotIn applies the NotIn predicate on the "language_id" field.
func LanguageIDNotIn(vs ...int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldLanguageID, vs...))
}

// LanguageIDGT applies the GT predicate on the "language_id" field.
func LanguageIDGT(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldLanguageID, v))
}

// LanguageIDGTE applies the GTE predicate on the "language_id" field.
func LanguageIDGTE(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldLanguageID, v))
}

// LanguageIDLT applies the LT predicate on the "language_id" field.
func LanguageIDLT(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldLanguageID, v))
}

// LanguageIDLTE applies the LTE predicate on the "language_id" field.
func LanguageIDLTE(v int64) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldLanguageID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.SdkInfo {
	return predicate.SdkInfo(sql.FieldContainsFold(FieldVersion, v))
}

// HasAppSdk applies the HasEdge predicate on the "app_sdk" edge.
func HasAppSdk() predicate.SdkInfo {
	return predicate.SdkInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppSdkTable, AppSdkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppSdkWith applies the HasEdge predicate on the "app_sdk" edge with a given conditions (other predicates).
func HasAppSdkWith(preds ...predicate.AppSdk) predicate.SdkInfo {
	return predicate.SdkInfo(func(s *sql.Selector) {
		step := newAppSdkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SdkInfo) predicate.SdkInfo {
	return predicate.SdkInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SdkInfo) predicate.SdkInfo {
	return predicate.SdkInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SdkInfo) predicate.SdkInfo {
	return predicate.SdkInfo(sql.NotPredicates(p))
}
