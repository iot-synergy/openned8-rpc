// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/openned8-rpc/ent/industryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// IndustryInfoUpdate is the builder for updating IndustryInfo entities.
type IndustryInfoUpdate struct {
	config
	hooks    []Hook
	mutation *IndustryInfoMutation
}

// Where appends a list predicates to the IndustryInfoUpdate builder.
func (iiu *IndustryInfoUpdate) Where(ps ...predicate.IndustryInfo) *IndustryInfoUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetUpdatedAt sets the "updated_at" field.
func (iiu *IndustryInfoUpdate) SetUpdatedAt(t time.Time) *IndustryInfoUpdate {
	iiu.mutation.SetUpdatedAt(t)
	return iiu
}

// SetName sets the "name" field.
func (iiu *IndustryInfoUpdate) SetName(s string) *IndustryInfoUpdate {
	iiu.mutation.SetName(s)
	return iiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iiu *IndustryInfoUpdate) SetNillableName(s *string) *IndustryInfoUpdate {
	if s != nil {
		iiu.SetName(*s)
	}
	return iiu
}

// Mutation returns the IndustryInfoMutation object of the builder.
func (iiu *IndustryInfoUpdate) Mutation() *IndustryInfoMutation {
	return iiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *IndustryInfoUpdate) Save(ctx context.Context) (int, error) {
	iiu.defaults()
	return withHooks(ctx, iiu.sqlSave, iiu.mutation, iiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *IndustryInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *IndustryInfoUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *IndustryInfoUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiu *IndustryInfoUpdate) defaults() {
	if _, ok := iiu.mutation.UpdatedAt(); !ok {
		v := industryinfo.UpdateDefaultUpdatedAt()
		iiu.mutation.SetUpdatedAt(v)
	}
}

func (iiu *IndustryInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(industryinfo.Table, industryinfo.Columns, sqlgraph.NewFieldSpec(industryinfo.FieldID, field.TypeUint64))
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.UpdatedAt(); ok {
		_spec.SetField(industryinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iiu.mutation.Name(); ok {
		_spec.SetField(industryinfo.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{industryinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iiu.mutation.done = true
	return n, nil
}

// IndustryInfoUpdateOne is the builder for updating a single IndustryInfo entity.
type IndustryInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IndustryInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iiuo *IndustryInfoUpdateOne) SetUpdatedAt(t time.Time) *IndustryInfoUpdateOne {
	iiuo.mutation.SetUpdatedAt(t)
	return iiuo
}

// SetName sets the "name" field.
func (iiuo *IndustryInfoUpdateOne) SetName(s string) *IndustryInfoUpdateOne {
	iiuo.mutation.SetName(s)
	return iiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iiuo *IndustryInfoUpdateOne) SetNillableName(s *string) *IndustryInfoUpdateOne {
	if s != nil {
		iiuo.SetName(*s)
	}
	return iiuo
}

// Mutation returns the IndustryInfoMutation object of the builder.
func (iiuo *IndustryInfoUpdateOne) Mutation() *IndustryInfoMutation {
	return iiuo.mutation
}

// Where appends a list predicates to the IndustryInfoUpdate builder.
func (iiuo *IndustryInfoUpdateOne) Where(ps ...predicate.IndustryInfo) *IndustryInfoUpdateOne {
	iiuo.mutation.Where(ps...)
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *IndustryInfoUpdateOne) Select(field string, fields ...string) *IndustryInfoUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated IndustryInfo entity.
func (iiuo *IndustryInfoUpdateOne) Save(ctx context.Context) (*IndustryInfo, error) {
	iiuo.defaults()
	return withHooks(ctx, iiuo.sqlSave, iiuo.mutation, iiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *IndustryInfoUpdateOne) SaveX(ctx context.Context) *IndustryInfo {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *IndustryInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *IndustryInfoUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiuo *IndustryInfoUpdateOne) defaults() {
	if _, ok := iiuo.mutation.UpdatedAt(); !ok {
		v := industryinfo.UpdateDefaultUpdatedAt()
		iiuo.mutation.SetUpdatedAt(v)
	}
}

func (iiuo *IndustryInfoUpdateOne) sqlSave(ctx context.Context) (_node *IndustryInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(industryinfo.Table, industryinfo.Columns, sqlgraph.NewFieldSpec(industryinfo.FieldID, field.TypeUint64))
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IndustryInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, industryinfo.FieldID)
		for _, f := range fields {
			if !industryinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != industryinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(industryinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iiuo.mutation.Name(); ok {
		_spec.SetField(industryinfo.FieldName, field.TypeString, value)
	}
	_node = &IndustryInfo{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{industryinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iiuo.mutation.done = true
	return _node, nil
}
