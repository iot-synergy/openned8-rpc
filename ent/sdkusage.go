// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/sdkusage"
)

// SdkUsage is the model entity for the SdkUsage schema.
type SdkUsage struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 用户id
	UserID string `json:"user_id,omitempty"`
	// 最大使用量
	All int64 `json:"all,omitempty"`
	// 已使用量
	Used         int64 `json:"used,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SdkUsage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sdkusage.FieldAll, sdkusage.FieldUsed:
			values[i] = new(sql.NullInt64)
		case sdkusage.FieldUserID:
			values[i] = new(sql.NullString)
		case sdkusage.FieldCreatedAt, sdkusage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sdkusage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SdkUsage fields.
func (su *SdkUsage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sdkusage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				su.ID = *value
			}
		case sdkusage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case sdkusage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case sdkusage.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				su.UserID = value.String
			}
		case sdkusage.FieldAll:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field all", values[i])
			} else if value.Valid {
				su.All = value.Int64
			}
		case sdkusage.FieldUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				su.Used = value.Int64
			}
		default:
			su.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SdkUsage.
// This includes values selected through modifiers, order, etc.
func (su *SdkUsage) Value(name string) (ent.Value, error) {
	return su.selectValues.Get(name)
}

// Update returns a builder for updating this SdkUsage.
// Note that you need to call SdkUsage.Unwrap() before calling this method if this SdkUsage
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SdkUsage) Update() *SdkUsageUpdateOne {
	return NewSdkUsageClient(su.config).UpdateOne(su)
}

// Unwrap unwraps the SdkUsage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SdkUsage) Unwrap() *SdkUsage {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SdkUsage is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SdkUsage) String() string {
	var builder strings.Builder
	builder.WriteString("SdkUsage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("created_at=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(su.UserID)
	builder.WriteString(", ")
	builder.WriteString("all=")
	builder.WriteString(fmt.Sprintf("%v", su.All))
	builder.WriteString(", ")
	builder.WriteString("used=")
	builder.WriteString(fmt.Sprintf("%v", su.Used))
	builder.WriteByte(')')
	return builder.String()
}

// SdkUsages is a parsable slice of SdkUsage.
type SdkUsages []*SdkUsage
