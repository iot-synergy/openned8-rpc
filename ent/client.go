// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/iot-synergy/openned8-rpc/ent/activecodeinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/categoryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/industryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/sdkinfo"
	"github.com/iot-synergy/openned8-rpc/ent/sdkusage"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ActiveCodeInfo is the client for interacting with the ActiveCodeInfo builders.
	ActiveCodeInfo *ActiveCodeInfoClient
	// AppInfo is the client for interacting with the AppInfo builders.
	AppInfo *AppInfoClient
	// AppSdk is the client for interacting with the AppSdk builders.
	AppSdk *AppSdkClient
	// CategoryInfo is the client for interacting with the CategoryInfo builders.
	CategoryInfo *CategoryInfoClient
	// IndustryInfo is the client for interacting with the IndustryInfo builders.
	IndustryInfo *IndustryInfoClient
	// SdkInfo is the client for interacting with the SdkInfo builders.
	SdkInfo *SdkInfoClient
	// SdkUsage is the client for interacting with the SdkUsage builders.
	SdkUsage *SdkUsageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ActiveCodeInfo = NewActiveCodeInfoClient(c.config)
	c.AppInfo = NewAppInfoClient(c.config)
	c.AppSdk = NewAppSdkClient(c.config)
	c.CategoryInfo = NewCategoryInfoClient(c.config)
	c.IndustryInfo = NewIndustryInfoClient(c.config)
	c.SdkInfo = NewSdkInfoClient(c.config)
	c.SdkUsage = NewSdkUsageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ActiveCodeInfo: NewActiveCodeInfoClient(cfg),
		AppInfo:        NewAppInfoClient(cfg),
		AppSdk:         NewAppSdkClient(cfg),
		CategoryInfo:   NewCategoryInfoClient(cfg),
		IndustryInfo:   NewIndustryInfoClient(cfg),
		SdkInfo:        NewSdkInfoClient(cfg),
		SdkUsage:       NewSdkUsageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ActiveCodeInfo: NewActiveCodeInfoClient(cfg),
		AppInfo:        NewAppInfoClient(cfg),
		AppSdk:         NewAppSdkClient(cfg),
		CategoryInfo:   NewCategoryInfoClient(cfg),
		IndustryInfo:   NewIndustryInfoClient(cfg),
		SdkInfo:        NewSdkInfoClient(cfg),
		SdkUsage:       NewSdkUsageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ActiveCodeInfo.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ActiveCodeInfo, c.AppInfo, c.AppSdk, c.CategoryInfo, c.IndustryInfo,
		c.SdkInfo, c.SdkUsage,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ActiveCodeInfo, c.AppInfo, c.AppSdk, c.CategoryInfo, c.IndustryInfo,
		c.SdkInfo, c.SdkUsage,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActiveCodeInfoMutation:
		return c.ActiveCodeInfo.mutate(ctx, m)
	case *AppInfoMutation:
		return c.AppInfo.mutate(ctx, m)
	case *AppSdkMutation:
		return c.AppSdk.mutate(ctx, m)
	case *CategoryInfoMutation:
		return c.CategoryInfo.mutate(ctx, m)
	case *IndustryInfoMutation:
		return c.IndustryInfo.mutate(ctx, m)
	case *SdkInfoMutation:
		return c.SdkInfo.mutate(ctx, m)
	case *SdkUsageMutation:
		return c.SdkUsage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActiveCodeInfoClient is a client for the ActiveCodeInfo schema.
type ActiveCodeInfoClient struct {
	config
}

// NewActiveCodeInfoClient returns a client for the ActiveCodeInfo from the given config.
func NewActiveCodeInfoClient(c config) *ActiveCodeInfoClient {
	return &ActiveCodeInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activecodeinfo.Hooks(f(g(h())))`.
func (c *ActiveCodeInfoClient) Use(hooks ...Hook) {
	c.hooks.ActiveCodeInfo = append(c.hooks.ActiveCodeInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activecodeinfo.Intercept(f(g(h())))`.
func (c *ActiveCodeInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActiveCodeInfo = append(c.inters.ActiveCodeInfo, interceptors...)
}

// Create returns a builder for creating a ActiveCodeInfo entity.
func (c *ActiveCodeInfoClient) Create() *ActiveCodeInfoCreate {
	mutation := newActiveCodeInfoMutation(c.config, OpCreate)
	return &ActiveCodeInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActiveCodeInfo entities.
func (c *ActiveCodeInfoClient) CreateBulk(builders ...*ActiveCodeInfoCreate) *ActiveCodeInfoCreateBulk {
	return &ActiveCodeInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActiveCodeInfoClient) MapCreateBulk(slice any, setFunc func(*ActiveCodeInfoCreate, int)) *ActiveCodeInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActiveCodeInfoCreateBulk{err: fmt.Errorf("calling to ActiveCodeInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActiveCodeInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActiveCodeInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActiveCodeInfo.
func (c *ActiveCodeInfoClient) Update() *ActiveCodeInfoUpdate {
	mutation := newActiveCodeInfoMutation(c.config, OpUpdate)
	return &ActiveCodeInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActiveCodeInfoClient) UpdateOne(aci *ActiveCodeInfo) *ActiveCodeInfoUpdateOne {
	mutation := newActiveCodeInfoMutation(c.config, OpUpdateOne, withActiveCodeInfo(aci))
	return &ActiveCodeInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActiveCodeInfoClient) UpdateOneID(id uuid.UUID) *ActiveCodeInfoUpdateOne {
	mutation := newActiveCodeInfoMutation(c.config, OpUpdateOne, withActiveCodeInfoID(id))
	return &ActiveCodeInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActiveCodeInfo.
func (c *ActiveCodeInfoClient) Delete() *ActiveCodeInfoDelete {
	mutation := newActiveCodeInfoMutation(c.config, OpDelete)
	return &ActiveCodeInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActiveCodeInfoClient) DeleteOne(aci *ActiveCodeInfo) *ActiveCodeInfoDeleteOne {
	return c.DeleteOneID(aci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActiveCodeInfoClient) DeleteOneID(id uuid.UUID) *ActiveCodeInfoDeleteOne {
	builder := c.Delete().Where(activecodeinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActiveCodeInfoDeleteOne{builder}
}

// Query returns a query builder for ActiveCodeInfo.
func (c *ActiveCodeInfoClient) Query() *ActiveCodeInfoQuery {
	return &ActiveCodeInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActiveCodeInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a ActiveCodeInfo entity by its id.
func (c *ActiveCodeInfoClient) Get(ctx context.Context, id uuid.UUID) (*ActiveCodeInfo, error) {
	return c.Query().Where(activecodeinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActiveCodeInfoClient) GetX(ctx context.Context, id uuid.UUID) *ActiveCodeInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppSdk queries the app_sdk edge of a ActiveCodeInfo.
func (c *ActiveCodeInfoClient) QueryAppSdk(aci *ActiveCodeInfo) *AppSdkQuery {
	query := (&AppSdkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activecodeinfo.Table, activecodeinfo.FieldID, id),
			sqlgraph.To(appsdk.Table, appsdk.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activecodeinfo.AppSdkTable, activecodeinfo.AppSdkColumn),
		)
		fromV = sqlgraph.Neighbors(aci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActiveCodeInfoClient) Hooks() []Hook {
	return c.hooks.ActiveCodeInfo
}

// Interceptors returns the client interceptors.
func (c *ActiveCodeInfoClient) Interceptors() []Interceptor {
	return c.inters.ActiveCodeInfo
}

func (c *ActiveCodeInfoClient) mutate(ctx context.Context, m *ActiveCodeInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActiveCodeInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActiveCodeInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActiveCodeInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActiveCodeInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActiveCodeInfo mutation op: %q", m.Op())
	}
}

// AppInfoClient is a client for the AppInfo schema.
type AppInfoClient struct {
	config
}

// NewAppInfoClient returns a client for the AppInfo from the given config.
func NewAppInfoClient(c config) *AppInfoClient {
	return &AppInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinfo.Hooks(f(g(h())))`.
func (c *AppInfoClient) Use(hooks ...Hook) {
	c.hooks.AppInfo = append(c.hooks.AppInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appinfo.Intercept(f(g(h())))`.
func (c *AppInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppInfo = append(c.inters.AppInfo, interceptors...)
}

// Create returns a builder for creating a AppInfo entity.
func (c *AppInfoClient) Create() *AppInfoCreate {
	mutation := newAppInfoMutation(c.config, OpCreate)
	return &AppInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInfo entities.
func (c *AppInfoClient) CreateBulk(builders ...*AppInfoCreate) *AppInfoCreateBulk {
	return &AppInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppInfoClient) MapCreateBulk(slice any, setFunc func(*AppInfoCreate, int)) *AppInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppInfoCreateBulk{err: fmt.Errorf("calling to AppInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInfo.
func (c *AppInfoClient) Update() *AppInfoUpdate {
	mutation := newAppInfoMutation(c.config, OpUpdate)
	return &AppInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInfoClient) UpdateOne(ai *AppInfo) *AppInfoUpdateOne {
	mutation := newAppInfoMutation(c.config, OpUpdateOne, withAppInfo(ai))
	return &AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInfoClient) UpdateOneID(id string) *AppInfoUpdateOne {
	mutation := newAppInfoMutation(c.config, OpUpdateOne, withAppInfoID(id))
	return &AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInfo.
func (c *AppInfoClient) Delete() *AppInfoDelete {
	mutation := newAppInfoMutation(c.config, OpDelete)
	return &AppInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppInfoClient) DeleteOne(ai *AppInfo) *AppInfoDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppInfoClient) DeleteOneID(id string) *AppInfoDeleteOne {
	builder := c.Delete().Where(appinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInfoDeleteOne{builder}
}

// Query returns a query builder for AppInfo.
func (c *AppInfoClient) Query() *AppInfoQuery {
	return &AppInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a AppInfo entity by its id.
func (c *AppInfoClient) Get(ctx context.Context, id string) (*AppInfo, error) {
	return c.Query().Where(appinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInfoClient) GetX(ctx context.Context, id string) *AppInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppSdk queries the app_sdk edge of a AppInfo.
func (c *AppInfoClient) QueryAppSdk(ai *AppInfo) *AppSdkQuery {
	query := (&AppSdkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(appsdk.Table, appsdk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appinfo.AppSdkTable, appinfo.AppSdkColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppInfoClient) Hooks() []Hook {
	return c.hooks.AppInfo
}

// Interceptors returns the client interceptors.
func (c *AppInfoClient) Interceptors() []Interceptor {
	return c.inters.AppInfo
}

func (c *AppInfoClient) mutate(ctx context.Context, m *AppInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppInfo mutation op: %q", m.Op())
	}
}

// AppSdkClient is a client for the AppSdk schema.
type AppSdkClient struct {
	config
}

// NewAppSdkClient returns a client for the AppSdk from the given config.
func NewAppSdkClient(c config) *AppSdkClient {
	return &AppSdkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appsdk.Hooks(f(g(h())))`.
func (c *AppSdkClient) Use(hooks ...Hook) {
	c.hooks.AppSdk = append(c.hooks.AppSdk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appsdk.Intercept(f(g(h())))`.
func (c *AppSdkClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppSdk = append(c.inters.AppSdk, interceptors...)
}

// Create returns a builder for creating a AppSdk entity.
func (c *AppSdkClient) Create() *AppSdkCreate {
	mutation := newAppSdkMutation(c.config, OpCreate)
	return &AppSdkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppSdk entities.
func (c *AppSdkClient) CreateBulk(builders ...*AppSdkCreate) *AppSdkCreateBulk {
	return &AppSdkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppSdkClient) MapCreateBulk(slice any, setFunc func(*AppSdkCreate, int)) *AppSdkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppSdkCreateBulk{err: fmt.Errorf("calling to AppSdkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppSdkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppSdkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppSdk.
func (c *AppSdkClient) Update() *AppSdkUpdate {
	mutation := newAppSdkMutation(c.config, OpUpdate)
	return &AppSdkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppSdkClient) UpdateOne(as *AppSdk) *AppSdkUpdateOne {
	mutation := newAppSdkMutation(c.config, OpUpdateOne, withAppSdk(as))
	return &AppSdkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppSdkClient) UpdateOneID(id uuid.UUID) *AppSdkUpdateOne {
	mutation := newAppSdkMutation(c.config, OpUpdateOne, withAppSdkID(id))
	return &AppSdkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppSdk.
func (c *AppSdkClient) Delete() *AppSdkDelete {
	mutation := newAppSdkMutation(c.config, OpDelete)
	return &AppSdkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppSdkClient) DeleteOne(as *AppSdk) *AppSdkDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppSdkClient) DeleteOneID(id uuid.UUID) *AppSdkDeleteOne {
	builder := c.Delete().Where(appsdk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppSdkDeleteOne{builder}
}

// Query returns a query builder for AppSdk.
func (c *AppSdkClient) Query() *AppSdkQuery {
	return &AppSdkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppSdk},
		inters: c.Interceptors(),
	}
}

// Get returns a AppSdk entity by its id.
func (c *AppSdkClient) Get(ctx context.Context, id uuid.UUID) (*AppSdk, error) {
	return c.Query().Where(appsdk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppSdkClient) GetX(ctx context.Context, id uuid.UUID) *AppSdk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActiveCode queries the active_code edge of a AppSdk.
func (c *AppSdkClient) QueryActiveCode(as *AppSdk) *ActiveCodeInfoQuery {
	query := (&ActiveCodeInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appsdk.Table, appsdk.FieldID, id),
			sqlgraph.To(activecodeinfo.Table, activecodeinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appsdk.ActiveCodeTable, appsdk.ActiveCodeColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppInfo queries the app_info edge of a AppSdk.
func (c *AppSdkClient) QueryAppInfo(as *AppSdk) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appsdk.Table, appsdk.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appsdk.AppInfoTable, appsdk.AppInfoColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySdkInfo queries the sdk_info edge of a AppSdk.
func (c *AppSdkClient) QuerySdkInfo(as *AppSdk) *SdkInfoQuery {
	query := (&SdkInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appsdk.Table, appsdk.FieldID, id),
			sqlgraph.To(sdkinfo.Table, sdkinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appsdk.SdkInfoTable, appsdk.SdkInfoColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppSdkClient) Hooks() []Hook {
	return c.hooks.AppSdk
}

// Interceptors returns the client interceptors.
func (c *AppSdkClient) Interceptors() []Interceptor {
	return c.inters.AppSdk
}

func (c *AppSdkClient) mutate(ctx context.Context, m *AppSdkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppSdkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppSdkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppSdkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppSdkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppSdk mutation op: %q", m.Op())
	}
}

// CategoryInfoClient is a client for the CategoryInfo schema.
type CategoryInfoClient struct {
	config
}

// NewCategoryInfoClient returns a client for the CategoryInfo from the given config.
func NewCategoryInfoClient(c config) *CategoryInfoClient {
	return &CategoryInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categoryinfo.Hooks(f(g(h())))`.
func (c *CategoryInfoClient) Use(hooks ...Hook) {
	c.hooks.CategoryInfo = append(c.hooks.CategoryInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `categoryinfo.Intercept(f(g(h())))`.
func (c *CategoryInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.CategoryInfo = append(c.inters.CategoryInfo, interceptors...)
}

// Create returns a builder for creating a CategoryInfo entity.
func (c *CategoryInfoClient) Create() *CategoryInfoCreate {
	mutation := newCategoryInfoMutation(c.config, OpCreate)
	return &CategoryInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CategoryInfo entities.
func (c *CategoryInfoClient) CreateBulk(builders ...*CategoryInfoCreate) *CategoryInfoCreateBulk {
	return &CategoryInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryInfoClient) MapCreateBulk(slice any, setFunc func(*CategoryInfoCreate, int)) *CategoryInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryInfoCreateBulk{err: fmt.Errorf("calling to CategoryInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CategoryInfo.
func (c *CategoryInfoClient) Update() *CategoryInfoUpdate {
	mutation := newCategoryInfoMutation(c.config, OpUpdate)
	return &CategoryInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryInfoClient) UpdateOne(ci *CategoryInfo) *CategoryInfoUpdateOne {
	mutation := newCategoryInfoMutation(c.config, OpUpdateOne, withCategoryInfo(ci))
	return &CategoryInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryInfoClient) UpdateOneID(id uint64) *CategoryInfoUpdateOne {
	mutation := newCategoryInfoMutation(c.config, OpUpdateOne, withCategoryInfoID(id))
	return &CategoryInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CategoryInfo.
func (c *CategoryInfoClient) Delete() *CategoryInfoDelete {
	mutation := newCategoryInfoMutation(c.config, OpDelete)
	return &CategoryInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryInfoClient) DeleteOne(ci *CategoryInfo) *CategoryInfoDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryInfoClient) DeleteOneID(id uint64) *CategoryInfoDeleteOne {
	builder := c.Delete().Where(categoryinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryInfoDeleteOne{builder}
}

// Query returns a query builder for CategoryInfo.
func (c *CategoryInfoClient) Query() *CategoryInfoQuery {
	return &CategoryInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategoryInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a CategoryInfo entity by its id.
func (c *CategoryInfoClient) Get(ctx context.Context, id uint64) (*CategoryInfo, error) {
	return c.Query().Where(categoryinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryInfoClient) GetX(ctx context.Context, id uint64) *CategoryInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryInfoClient) Hooks() []Hook {
	return c.hooks.CategoryInfo
}

// Interceptors returns the client interceptors.
func (c *CategoryInfoClient) Interceptors() []Interceptor {
	return c.inters.CategoryInfo
}

func (c *CategoryInfoClient) mutate(ctx context.Context, m *CategoryInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CategoryInfo mutation op: %q", m.Op())
	}
}

// IndustryInfoClient is a client for the IndustryInfo schema.
type IndustryInfoClient struct {
	config
}

// NewIndustryInfoClient returns a client for the IndustryInfo from the given config.
func NewIndustryInfoClient(c config) *IndustryInfoClient {
	return &IndustryInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `industryinfo.Hooks(f(g(h())))`.
func (c *IndustryInfoClient) Use(hooks ...Hook) {
	c.hooks.IndustryInfo = append(c.hooks.IndustryInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `industryinfo.Intercept(f(g(h())))`.
func (c *IndustryInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.IndustryInfo = append(c.inters.IndustryInfo, interceptors...)
}

// Create returns a builder for creating a IndustryInfo entity.
func (c *IndustryInfoClient) Create() *IndustryInfoCreate {
	mutation := newIndustryInfoMutation(c.config, OpCreate)
	return &IndustryInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IndustryInfo entities.
func (c *IndustryInfoClient) CreateBulk(builders ...*IndustryInfoCreate) *IndustryInfoCreateBulk {
	return &IndustryInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IndustryInfoClient) MapCreateBulk(slice any, setFunc func(*IndustryInfoCreate, int)) *IndustryInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IndustryInfoCreateBulk{err: fmt.Errorf("calling to IndustryInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IndustryInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IndustryInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IndustryInfo.
func (c *IndustryInfoClient) Update() *IndustryInfoUpdate {
	mutation := newIndustryInfoMutation(c.config, OpUpdate)
	return &IndustryInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IndustryInfoClient) UpdateOne(ii *IndustryInfo) *IndustryInfoUpdateOne {
	mutation := newIndustryInfoMutation(c.config, OpUpdateOne, withIndustryInfo(ii))
	return &IndustryInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IndustryInfoClient) UpdateOneID(id uint64) *IndustryInfoUpdateOne {
	mutation := newIndustryInfoMutation(c.config, OpUpdateOne, withIndustryInfoID(id))
	return &IndustryInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IndustryInfo.
func (c *IndustryInfoClient) Delete() *IndustryInfoDelete {
	mutation := newIndustryInfoMutation(c.config, OpDelete)
	return &IndustryInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IndustryInfoClient) DeleteOne(ii *IndustryInfo) *IndustryInfoDeleteOne {
	return c.DeleteOneID(ii.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IndustryInfoClient) DeleteOneID(id uint64) *IndustryInfoDeleteOne {
	builder := c.Delete().Where(industryinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IndustryInfoDeleteOne{builder}
}

// Query returns a query builder for IndustryInfo.
func (c *IndustryInfoClient) Query() *IndustryInfoQuery {
	return &IndustryInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIndustryInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a IndustryInfo entity by its id.
func (c *IndustryInfoClient) Get(ctx context.Context, id uint64) (*IndustryInfo, error) {
	return c.Query().Where(industryinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IndustryInfoClient) GetX(ctx context.Context, id uint64) *IndustryInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IndustryInfoClient) Hooks() []Hook {
	return c.hooks.IndustryInfo
}

// Interceptors returns the client interceptors.
func (c *IndustryInfoClient) Interceptors() []Interceptor {
	return c.inters.IndustryInfo
}

func (c *IndustryInfoClient) mutate(ctx context.Context, m *IndustryInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IndustryInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IndustryInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IndustryInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IndustryInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IndustryInfo mutation op: %q", m.Op())
	}
}

// SdkInfoClient is a client for the SdkInfo schema.
type SdkInfoClient struct {
	config
}

// NewSdkInfoClient returns a client for the SdkInfo from the given config.
func NewSdkInfoClient(c config) *SdkInfoClient {
	return &SdkInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sdkinfo.Hooks(f(g(h())))`.
func (c *SdkInfoClient) Use(hooks ...Hook) {
	c.hooks.SdkInfo = append(c.hooks.SdkInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sdkinfo.Intercept(f(g(h())))`.
func (c *SdkInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.SdkInfo = append(c.inters.SdkInfo, interceptors...)
}

// Create returns a builder for creating a SdkInfo entity.
func (c *SdkInfoClient) Create() *SdkInfoCreate {
	mutation := newSdkInfoMutation(c.config, OpCreate)
	return &SdkInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SdkInfo entities.
func (c *SdkInfoClient) CreateBulk(builders ...*SdkInfoCreate) *SdkInfoCreateBulk {
	return &SdkInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SdkInfoClient) MapCreateBulk(slice any, setFunc func(*SdkInfoCreate, int)) *SdkInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SdkInfoCreateBulk{err: fmt.Errorf("calling to SdkInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SdkInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SdkInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SdkInfo.
func (c *SdkInfoClient) Update() *SdkInfoUpdate {
	mutation := newSdkInfoMutation(c.config, OpUpdate)
	return &SdkInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SdkInfoClient) UpdateOne(si *SdkInfo) *SdkInfoUpdateOne {
	mutation := newSdkInfoMutation(c.config, OpUpdateOne, withSdkInfo(si))
	return &SdkInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SdkInfoClient) UpdateOneID(id uuid.UUID) *SdkInfoUpdateOne {
	mutation := newSdkInfoMutation(c.config, OpUpdateOne, withSdkInfoID(id))
	return &SdkInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SdkInfo.
func (c *SdkInfoClient) Delete() *SdkInfoDelete {
	mutation := newSdkInfoMutation(c.config, OpDelete)
	return &SdkInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SdkInfoClient) DeleteOne(si *SdkInfo) *SdkInfoDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SdkInfoClient) DeleteOneID(id uuid.UUID) *SdkInfoDeleteOne {
	builder := c.Delete().Where(sdkinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SdkInfoDeleteOne{builder}
}

// Query returns a query builder for SdkInfo.
func (c *SdkInfoClient) Query() *SdkInfoQuery {
	return &SdkInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSdkInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a SdkInfo entity by its id.
func (c *SdkInfoClient) Get(ctx context.Context, id uuid.UUID) (*SdkInfo, error) {
	return c.Query().Where(sdkinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SdkInfoClient) GetX(ctx context.Context, id uuid.UUID) *SdkInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppSdk queries the app_sdk edge of a SdkInfo.
func (c *SdkInfoClient) QueryAppSdk(si *SdkInfo) *AppSdkQuery {
	query := (&AppSdkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sdkinfo.Table, sdkinfo.FieldID, id),
			sqlgraph.To(appsdk.Table, appsdk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sdkinfo.AppSdkTable, sdkinfo.AppSdkColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SdkInfoClient) Hooks() []Hook {
	return c.hooks.SdkInfo
}

// Interceptors returns the client interceptors.
func (c *SdkInfoClient) Interceptors() []Interceptor {
	return c.inters.SdkInfo
}

func (c *SdkInfoClient) mutate(ctx context.Context, m *SdkInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SdkInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SdkInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SdkInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SdkInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SdkInfo mutation op: %q", m.Op())
	}
}

// SdkUsageClient is a client for the SdkUsage schema.
type SdkUsageClient struct {
	config
}

// NewSdkUsageClient returns a client for the SdkUsage from the given config.
func NewSdkUsageClient(c config) *SdkUsageClient {
	return &SdkUsageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sdkusage.Hooks(f(g(h())))`.
func (c *SdkUsageClient) Use(hooks ...Hook) {
	c.hooks.SdkUsage = append(c.hooks.SdkUsage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sdkusage.Intercept(f(g(h())))`.
func (c *SdkUsageClient) Intercept(interceptors ...Interceptor) {
	c.inters.SdkUsage = append(c.inters.SdkUsage, interceptors...)
}

// Create returns a builder for creating a SdkUsage entity.
func (c *SdkUsageClient) Create() *SdkUsageCreate {
	mutation := newSdkUsageMutation(c.config, OpCreate)
	return &SdkUsageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SdkUsage entities.
func (c *SdkUsageClient) CreateBulk(builders ...*SdkUsageCreate) *SdkUsageCreateBulk {
	return &SdkUsageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SdkUsageClient) MapCreateBulk(slice any, setFunc func(*SdkUsageCreate, int)) *SdkUsageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SdkUsageCreateBulk{err: fmt.Errorf("calling to SdkUsageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SdkUsageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SdkUsageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SdkUsage.
func (c *SdkUsageClient) Update() *SdkUsageUpdate {
	mutation := newSdkUsageMutation(c.config, OpUpdate)
	return &SdkUsageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SdkUsageClient) UpdateOne(su *SdkUsage) *SdkUsageUpdateOne {
	mutation := newSdkUsageMutation(c.config, OpUpdateOne, withSdkUsage(su))
	return &SdkUsageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SdkUsageClient) UpdateOneID(id uuid.UUID) *SdkUsageUpdateOne {
	mutation := newSdkUsageMutation(c.config, OpUpdateOne, withSdkUsageID(id))
	return &SdkUsageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SdkUsage.
func (c *SdkUsageClient) Delete() *SdkUsageDelete {
	mutation := newSdkUsageMutation(c.config, OpDelete)
	return &SdkUsageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SdkUsageClient) DeleteOne(su *SdkUsage) *SdkUsageDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SdkUsageClient) DeleteOneID(id uuid.UUID) *SdkUsageDeleteOne {
	builder := c.Delete().Where(sdkusage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SdkUsageDeleteOne{builder}
}

// Query returns a query builder for SdkUsage.
func (c *SdkUsageClient) Query() *SdkUsageQuery {
	return &SdkUsageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSdkUsage},
		inters: c.Interceptors(),
	}
}

// Get returns a SdkUsage entity by its id.
func (c *SdkUsageClient) Get(ctx context.Context, id uuid.UUID) (*SdkUsage, error) {
	return c.Query().Where(sdkusage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SdkUsageClient) GetX(ctx context.Context, id uuid.UUID) *SdkUsage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SdkUsageClient) Hooks() []Hook {
	return c.hooks.SdkUsage
}

// Interceptors returns the client interceptors.
func (c *SdkUsageClient) Interceptors() []Interceptor {
	return c.inters.SdkUsage
}

func (c *SdkUsageClient) mutate(ctx context.Context, m *SdkUsageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SdkUsageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SdkUsageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SdkUsageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SdkUsageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SdkUsage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ActiveCodeInfo, AppInfo, AppSdk, CategoryInfo, IndustryInfo, SdkInfo,
		SdkUsage []ent.Hook
	}
	inters struct {
		ActiveCodeInfo, AppInfo, AppSdk, CategoryInfo, IndustryInfo, SdkInfo,
		SdkUsage []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
