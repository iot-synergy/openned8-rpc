// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/sdkusage"
)

// SdkUsageCreate is the builder for creating a SdkUsage entity.
type SdkUsageCreate struct {
	config
	mutation *SdkUsageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (suc *SdkUsageCreate) SetCreatedAt(t time.Time) *SdkUsageCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suc *SdkUsageCreate) SetNillableCreatedAt(t *time.Time) *SdkUsageCreate {
	if t != nil {
		suc.SetCreatedAt(*t)
	}
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *SdkUsageCreate) SetUpdatedAt(t time.Time) *SdkUsageCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suc *SdkUsageCreate) SetNillableUpdatedAt(t *time.Time) *SdkUsageCreate {
	if t != nil {
		suc.SetUpdatedAt(*t)
	}
	return suc
}

// SetUserID sets the "user_id" field.
func (suc *SdkUsageCreate) SetUserID(s string) *SdkUsageCreate {
	suc.mutation.SetUserID(s)
	return suc
}

// SetAll sets the "all" field.
func (suc *SdkUsageCreate) SetAll(i int64) *SdkUsageCreate {
	suc.mutation.SetAll(i)
	return suc
}

// SetNillableAll sets the "all" field if the given value is not nil.
func (suc *SdkUsageCreate) SetNillableAll(i *int64) *SdkUsageCreate {
	if i != nil {
		suc.SetAll(*i)
	}
	return suc
}

// SetUsed sets the "used" field.
func (suc *SdkUsageCreate) SetUsed(i int64) *SdkUsageCreate {
	suc.mutation.SetUsed(i)
	return suc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (suc *SdkUsageCreate) SetNillableUsed(i *int64) *SdkUsageCreate {
	if i != nil {
		suc.SetUsed(*i)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *SdkUsageCreate) SetID(u uuid.UUID) *SdkUsageCreate {
	suc.mutation.SetID(u)
	return suc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (suc *SdkUsageCreate) SetNillableID(u *uuid.UUID) *SdkUsageCreate {
	if u != nil {
		suc.SetID(*u)
	}
	return suc
}

// Mutation returns the SdkUsageMutation object of the builder.
func (suc *SdkUsageCreate) Mutation() *SdkUsageMutation {
	return suc.mutation
}

// Save creates the SdkUsage in the database.
func (suc *SdkUsageCreate) Save(ctx context.Context) (*SdkUsage, error) {
	suc.defaults()
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SdkUsageCreate) SaveX(ctx context.Context) *SdkUsage {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SdkUsageCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SdkUsageCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SdkUsageCreate) defaults() {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		v := sdkusage.DefaultCreatedAt()
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		v := sdkusage.DefaultUpdatedAt()
		suc.mutation.SetUpdatedAt(v)
	}
	if _, ok := suc.mutation.All(); !ok {
		v := sdkusage.DefaultAll
		suc.mutation.SetAll(v)
	}
	if _, ok := suc.mutation.Used(); !ok {
		v := sdkusage.DefaultUsed
		suc.mutation.SetUsed(v)
	}
	if _, ok := suc.mutation.ID(); !ok {
		v := sdkusage.DefaultID()
		suc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SdkUsageCreate) check() error {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SdkUsage.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SdkUsage.updated_at"`)}
	}
	if _, ok := suc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "SdkUsage.user_id"`)}
	}
	if _, ok := suc.mutation.All(); !ok {
		return &ValidationError{Name: "all", err: errors.New(`ent: missing required field "SdkUsage.all"`)}
	}
	if _, ok := suc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`ent: missing required field "SdkUsage.used"`)}
	}
	return nil
}

func (suc *SdkUsageCreate) sqlSave(ctx context.Context) (*SdkUsage, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SdkUsageCreate) createSpec() (*SdkUsage, *sqlgraph.CreateSpec) {
	var (
		_node = &SdkUsage{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(sdkusage.Table, sqlgraph.NewFieldSpec(sdkusage.FieldID, field.TypeUUID))
	)
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.SetField(sdkusage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.SetField(sdkusage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.UserID(); ok {
		_spec.SetField(sdkusage.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := suc.mutation.All(); ok {
		_spec.SetField(sdkusage.FieldAll, field.TypeInt64, value)
		_node.All = value
	}
	if value, ok := suc.mutation.Used(); ok {
		_spec.SetField(sdkusage.FieldUsed, field.TypeInt64, value)
		_node.Used = value
	}
	return _node, _spec
}

// SdkUsageCreateBulk is the builder for creating many SdkUsage entities in bulk.
type SdkUsageCreateBulk struct {
	config
	err      error
	builders []*SdkUsageCreate
}

// Save creates the SdkUsage entities in the database.
func (sucb *SdkUsageCreateBulk) Save(ctx context.Context) ([]*SdkUsage, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SdkUsage, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SdkUsageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SdkUsageCreateBulk) SaveX(ctx context.Context) []*SdkUsage {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SdkUsageCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SdkUsageCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}
