// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/activecodeinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
	"github.com/iot-synergy/openned8-rpc/ent/sdkinfo"
)

// AppSdkUpdate is the builder for updating AppSdk entities.
type AppSdkUpdate struct {
	config
	hooks    []Hook
	mutation *AppSdkMutation
}

// Where appends a list predicates to the AppSdkUpdate builder.
func (asu *AppSdkUpdate) Where(ps ...predicate.AppSdk) *AppSdkUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AppSdkUpdate) SetUpdatedAt(t time.Time) *AppSdkUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetApp sets the "app" field.
func (asu *AppSdkUpdate) SetApp(s string) *AppSdkUpdate {
	asu.mutation.SetApp(s)
	return asu
}

// SetNillableApp sets the "app" field if the given value is not nil.
func (asu *AppSdkUpdate) SetNillableApp(s *string) *AppSdkUpdate {
	if s != nil {
		asu.SetApp(*s)
	}
	return asu
}

// ClearApp clears the value of the "app" field.
func (asu *AppSdkUpdate) ClearApp() *AppSdkUpdate {
	asu.mutation.ClearApp()
	return asu
}

// SetSdk sets the "sdk" field.
func (asu *AppSdkUpdate) SetSdk(u uuid.UUID) *AppSdkUpdate {
	asu.mutation.SetSdk(u)
	return asu
}

// SetNillableSdk sets the "sdk" field if the given value is not nil.
func (asu *AppSdkUpdate) SetNillableSdk(u *uuid.UUID) *AppSdkUpdate {
	if u != nil {
		asu.SetSdk(*u)
	}
	return asu
}

// ClearSdk clears the value of the "sdk" field.
func (asu *AppSdkUpdate) ClearSdk() *AppSdkUpdate {
	asu.mutation.ClearSdk()
	return asu
}

// SetSdkKey sets the "sdk_key" field.
func (asu *AppSdkUpdate) SetSdkKey(s string) *AppSdkUpdate {
	asu.mutation.SetSdkKey(s)
	return asu
}

// SetNillableSdkKey sets the "sdk_key" field if the given value is not nil.
func (asu *AppSdkUpdate) SetNillableSdkKey(s *string) *AppSdkUpdate {
	if s != nil {
		asu.SetSdkKey(*s)
	}
	return asu
}

// AddActiveCodeIDs adds the "active_code" edge to the ActiveCodeInfo entity by IDs.
func (asu *AppSdkUpdate) AddActiveCodeIDs(ids ...uuid.UUID) *AppSdkUpdate {
	asu.mutation.AddActiveCodeIDs(ids...)
	return asu
}

// AddActiveCode adds the "active_code" edges to the ActiveCodeInfo entity.
func (asu *AppSdkUpdate) AddActiveCode(a ...*ActiveCodeInfo) *AppSdkUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asu.AddActiveCodeIDs(ids...)
}

// SetAppInfoID sets the "app_info" edge to the AppInfo entity by ID.
func (asu *AppSdkUpdate) SetAppInfoID(id string) *AppSdkUpdate {
	asu.mutation.SetAppInfoID(id)
	return asu
}

// SetNillableAppInfoID sets the "app_info" edge to the AppInfo entity by ID if the given value is not nil.
func (asu *AppSdkUpdate) SetNillableAppInfoID(id *string) *AppSdkUpdate {
	if id != nil {
		asu = asu.SetAppInfoID(*id)
	}
	return asu
}

// SetAppInfo sets the "app_info" edge to the AppInfo entity.
func (asu *AppSdkUpdate) SetAppInfo(a *AppInfo) *AppSdkUpdate {
	return asu.SetAppInfoID(a.ID)
}

// SetSdkInfoID sets the "sdk_info" edge to the SdkInfo entity by ID.
func (asu *AppSdkUpdate) SetSdkInfoID(id uuid.UUID) *AppSdkUpdate {
	asu.mutation.SetSdkInfoID(id)
	return asu
}

// SetNillableSdkInfoID sets the "sdk_info" edge to the SdkInfo entity by ID if the given value is not nil.
func (asu *AppSdkUpdate) SetNillableSdkInfoID(id *uuid.UUID) *AppSdkUpdate {
	if id != nil {
		asu = asu.SetSdkInfoID(*id)
	}
	return asu
}

// SetSdkInfo sets the "sdk_info" edge to the SdkInfo entity.
func (asu *AppSdkUpdate) SetSdkInfo(s *SdkInfo) *AppSdkUpdate {
	return asu.SetSdkInfoID(s.ID)
}

// Mutation returns the AppSdkMutation object of the builder.
func (asu *AppSdkUpdate) Mutation() *AppSdkMutation {
	return asu.mutation
}

// ClearActiveCode clears all "active_code" edges to the ActiveCodeInfo entity.
func (asu *AppSdkUpdate) ClearActiveCode() *AppSdkUpdate {
	asu.mutation.ClearActiveCode()
	return asu
}

// RemoveActiveCodeIDs removes the "active_code" edge to ActiveCodeInfo entities by IDs.
func (asu *AppSdkUpdate) RemoveActiveCodeIDs(ids ...uuid.UUID) *AppSdkUpdate {
	asu.mutation.RemoveActiveCodeIDs(ids...)
	return asu
}

// RemoveActiveCode removes "active_code" edges to ActiveCodeInfo entities.
func (asu *AppSdkUpdate) RemoveActiveCode(a ...*ActiveCodeInfo) *AppSdkUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asu.RemoveActiveCodeIDs(ids...)
}

// ClearAppInfo clears the "app_info" edge to the AppInfo entity.
func (asu *AppSdkUpdate) ClearAppInfo() *AppSdkUpdate {
	asu.mutation.ClearAppInfo()
	return asu
}

// ClearSdkInfo clears the "sdk_info" edge to the SdkInfo entity.
func (asu *AppSdkUpdate) ClearSdkInfo() *AppSdkUpdate {
	asu.mutation.ClearSdkInfo()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AppSdkUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppSdkUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppSdkUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppSdkUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AppSdkUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := appsdk.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AppSdkUpdate) check() error {
	if v, ok := asu.mutation.SdkKey(); ok {
		if err := appsdk.SdkKeyValidator(v); err != nil {
			return &ValidationError{Name: "sdk_key", err: fmt.Errorf(`ent: validator failed for field "AppSdk.sdk_key": %w`, err)}
		}
	}
	return nil
}

func (asu *AppSdkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appsdk.Table, appsdk.Columns, sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(appsdk.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asu.mutation.SdkKey(); ok {
		_spec.SetField(appsdk.FieldSdkKey, field.TypeString, value)
	}
	if asu.mutation.ActiveCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appsdk.ActiveCodeTable,
			Columns: []string{appsdk.ActiveCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.RemovedActiveCodeIDs(); len(nodes) > 0 && !asu.mutation.ActiveCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appsdk.ActiveCodeTable,
			Columns: []string{appsdk.ActiveCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.ActiveCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appsdk.ActiveCodeTable,
			Columns: []string{appsdk.ActiveCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.AppInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.AppInfoTable,
			Columns: []string{appsdk.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AppInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.AppInfoTable,
			Columns: []string{appsdk.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.SdkInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.SdkInfoTable,
			Columns: []string{appsdk.SdkInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sdkinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.SdkInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.SdkInfoTable,
			Columns: []string{appsdk.SdkInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sdkinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsdk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AppSdkUpdateOne is the builder for updating a single AppSdk entity.
type AppSdkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppSdkMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AppSdkUpdateOne) SetUpdatedAt(t time.Time) *AppSdkUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetApp sets the "app" field.
func (asuo *AppSdkUpdateOne) SetApp(s string) *AppSdkUpdateOne {
	asuo.mutation.SetApp(s)
	return asuo
}

// SetNillableApp sets the "app" field if the given value is not nil.
func (asuo *AppSdkUpdateOne) SetNillableApp(s *string) *AppSdkUpdateOne {
	if s != nil {
		asuo.SetApp(*s)
	}
	return asuo
}

// ClearApp clears the value of the "app" field.
func (asuo *AppSdkUpdateOne) ClearApp() *AppSdkUpdateOne {
	asuo.mutation.ClearApp()
	return asuo
}

// SetSdk sets the "sdk" field.
func (asuo *AppSdkUpdateOne) SetSdk(u uuid.UUID) *AppSdkUpdateOne {
	asuo.mutation.SetSdk(u)
	return asuo
}

// SetNillableSdk sets the "sdk" field if the given value is not nil.
func (asuo *AppSdkUpdateOne) SetNillableSdk(u *uuid.UUID) *AppSdkUpdateOne {
	if u != nil {
		asuo.SetSdk(*u)
	}
	return asuo
}

// ClearSdk clears the value of the "sdk" field.
func (asuo *AppSdkUpdateOne) ClearSdk() *AppSdkUpdateOne {
	asuo.mutation.ClearSdk()
	return asuo
}

// SetSdkKey sets the "sdk_key" field.
func (asuo *AppSdkUpdateOne) SetSdkKey(s string) *AppSdkUpdateOne {
	asuo.mutation.SetSdkKey(s)
	return asuo
}

// SetNillableSdkKey sets the "sdk_key" field if the given value is not nil.
func (asuo *AppSdkUpdateOne) SetNillableSdkKey(s *string) *AppSdkUpdateOne {
	if s != nil {
		asuo.SetSdkKey(*s)
	}
	return asuo
}

// AddActiveCodeIDs adds the "active_code" edge to the ActiveCodeInfo entity by IDs.
func (asuo *AppSdkUpdateOne) AddActiveCodeIDs(ids ...uuid.UUID) *AppSdkUpdateOne {
	asuo.mutation.AddActiveCodeIDs(ids...)
	return asuo
}

// AddActiveCode adds the "active_code" edges to the ActiveCodeInfo entity.
func (asuo *AppSdkUpdateOne) AddActiveCode(a ...*ActiveCodeInfo) *AppSdkUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asuo.AddActiveCodeIDs(ids...)
}

// SetAppInfoID sets the "app_info" edge to the AppInfo entity by ID.
func (asuo *AppSdkUpdateOne) SetAppInfoID(id string) *AppSdkUpdateOne {
	asuo.mutation.SetAppInfoID(id)
	return asuo
}

// SetNillableAppInfoID sets the "app_info" edge to the AppInfo entity by ID if the given value is not nil.
func (asuo *AppSdkUpdateOne) SetNillableAppInfoID(id *string) *AppSdkUpdateOne {
	if id != nil {
		asuo = asuo.SetAppInfoID(*id)
	}
	return asuo
}

// SetAppInfo sets the "app_info" edge to the AppInfo entity.
func (asuo *AppSdkUpdateOne) SetAppInfo(a *AppInfo) *AppSdkUpdateOne {
	return asuo.SetAppInfoID(a.ID)
}

// SetSdkInfoID sets the "sdk_info" edge to the SdkInfo entity by ID.
func (asuo *AppSdkUpdateOne) SetSdkInfoID(id uuid.UUID) *AppSdkUpdateOne {
	asuo.mutation.SetSdkInfoID(id)
	return asuo
}

// SetNillableSdkInfoID sets the "sdk_info" edge to the SdkInfo entity by ID if the given value is not nil.
func (asuo *AppSdkUpdateOne) SetNillableSdkInfoID(id *uuid.UUID) *AppSdkUpdateOne {
	if id != nil {
		asuo = asuo.SetSdkInfoID(*id)
	}
	return asuo
}

// SetSdkInfo sets the "sdk_info" edge to the SdkInfo entity.
func (asuo *AppSdkUpdateOne) SetSdkInfo(s *SdkInfo) *AppSdkUpdateOne {
	return asuo.SetSdkInfoID(s.ID)
}

// Mutation returns the AppSdkMutation object of the builder.
func (asuo *AppSdkUpdateOne) Mutation() *AppSdkMutation {
	return asuo.mutation
}

// ClearActiveCode clears all "active_code" edges to the ActiveCodeInfo entity.
func (asuo *AppSdkUpdateOne) ClearActiveCode() *AppSdkUpdateOne {
	asuo.mutation.ClearActiveCode()
	return asuo
}

// RemoveActiveCodeIDs removes the "active_code" edge to ActiveCodeInfo entities by IDs.
func (asuo *AppSdkUpdateOne) RemoveActiveCodeIDs(ids ...uuid.UUID) *AppSdkUpdateOne {
	asuo.mutation.RemoveActiveCodeIDs(ids...)
	return asuo
}

// RemoveActiveCode removes "active_code" edges to ActiveCodeInfo entities.
func (asuo *AppSdkUpdateOne) RemoveActiveCode(a ...*ActiveCodeInfo) *AppSdkUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asuo.RemoveActiveCodeIDs(ids...)
}

// ClearAppInfo clears the "app_info" edge to the AppInfo entity.
func (asuo *AppSdkUpdateOne) ClearAppInfo() *AppSdkUpdateOne {
	asuo.mutation.ClearAppInfo()
	return asuo
}

// ClearSdkInfo clears the "sdk_info" edge to the SdkInfo entity.
func (asuo *AppSdkUpdateOne) ClearSdkInfo() *AppSdkUpdateOne {
	asuo.mutation.ClearSdkInfo()
	return asuo
}

// Where appends a list predicates to the AppSdkUpdate builder.
func (asuo *AppSdkUpdateOne) Where(ps ...predicate.AppSdk) *AppSdkUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AppSdkUpdateOne) Select(field string, fields ...string) *AppSdkUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AppSdk entity.
func (asuo *AppSdkUpdateOne) Save(ctx context.Context) (*AppSdk, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppSdkUpdateOne) SaveX(ctx context.Context) *AppSdk {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AppSdkUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppSdkUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AppSdkUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := appsdk.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AppSdkUpdateOne) check() error {
	if v, ok := asuo.mutation.SdkKey(); ok {
		if err := appsdk.SdkKeyValidator(v); err != nil {
			return &ValidationError{Name: "sdk_key", err: fmt.Errorf(`ent: validator failed for field "AppSdk.sdk_key": %w`, err)}
		}
	}
	return nil
}

func (asuo *AppSdkUpdateOne) sqlSave(ctx context.Context) (_node *AppSdk, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appsdk.Table, appsdk.Columns, sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppSdk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsdk.FieldID)
		for _, f := range fields {
			if !appsdk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appsdk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appsdk.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.SdkKey(); ok {
		_spec.SetField(appsdk.FieldSdkKey, field.TypeString, value)
	}
	if asuo.mutation.ActiveCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appsdk.ActiveCodeTable,
			Columns: []string{appsdk.ActiveCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.RemovedActiveCodeIDs(); len(nodes) > 0 && !asuo.mutation.ActiveCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appsdk.ActiveCodeTable,
			Columns: []string{appsdk.ActiveCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.ActiveCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appsdk.ActiveCodeTable,
			Columns: []string{appsdk.ActiveCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.AppInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.AppInfoTable,
			Columns: []string{appsdk.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AppInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.AppInfoTable,
			Columns: []string{appsdk.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.SdkInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.SdkInfoTable,
			Columns: []string{appsdk.SdkInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sdkinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.SdkInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appsdk.SdkInfoTable,
			Columns: []string{appsdk.SdkInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sdkinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppSdk{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsdk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
