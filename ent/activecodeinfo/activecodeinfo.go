// Code generated by ent, DO NOT EDIT.

package activecodeinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/gofrs/uuid/v5"
)

const (
	// Label holds the string label denoting the activecodeinfo type in the database.
	Label = "active_code_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldActiveKey holds the string denoting the active_key field in the database.
	FieldActiveKey = "active_key"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldAppKey holds the string denoting the app_key field in the database.
	FieldAppKey = "app_key"
	// FieldActiveIP holds the string denoting the active_ip field in the database.
	FieldActiveIP = "active_ip"
	// FieldDeviceSn holds the string denoting the device_sn field in the database.
	FieldDeviceSn = "device_sn"
	// FieldDeviceMAC holds the string denoting the device_mac field in the database.
	FieldDeviceMAC = "device_mac"
	// FieldDeviceIdentity holds the string denoting the device_identity field in the database.
	FieldDeviceIdentity = "device_identity"
	// FieldActiveDate holds the string denoting the active_date field in the database.
	FieldActiveDate = "active_date"
	// FieldActiveType holds the string denoting the active_type field in the database.
	FieldActiveType = "active_type"
	// FieldActiveFile holds the string denoting the active_file field in the database.
	FieldActiveFile = "active_file"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldExpireDate holds the string denoting the expire_date field in the database.
	FieldExpireDate = "expire_date"
	// FieldAppSdkID holds the string denoting the app_sdk_id field in the database.
	FieldAppSdkID = "app_sdk_id"
	// FieldImei holds the string denoting the imei field in the database.
	FieldImei = "imei"
	// EdgeAppSdk holds the string denoting the app_sdk edge name in mutations.
	EdgeAppSdk = "app_sdk"
	// Table holds the table name of the activecodeinfo in the database.
	Table = "active_code_info"
	// AppSdkTable is the table that holds the app_sdk relation/edge.
	AppSdkTable = "active_code_info"
	// AppSdkInverseTable is the table name for the AppSdk entity.
	// It exists in this package in order to avoid circular dependency with the "appsdk" package.
	AppSdkInverseTable = "app_sdk"
	// AppSdkColumn is the table column denoting the app_sdk relation/edge.
	AppSdkColumn = "app_sdk_id"
)

// Columns holds all SQL columns for activecodeinfo fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldActiveKey,
	FieldUserID,
	FieldAppID,
	FieldAppKey,
	FieldActiveIP,
	FieldDeviceSn,
	FieldDeviceMAC,
	FieldDeviceIdentity,
	FieldActiveDate,
	FieldActiveType,
	FieldActiveFile,
	FieldVersion,
	FieldStartDate,
	FieldExpireDate,
	FieldAppSdkID,
	FieldImei,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultActiveDate holds the default value on creation for the "active_date" field.
	DefaultActiveDate time.Time
	// DefaultActiveType holds the default value on creation for the "active_type" field.
	DefaultActiveType int64
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ActiveCodeInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByActiveKey orders the results by the active_key field.
func ByActiveKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveKey, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByAppKey orders the results by the app_key field.
func ByAppKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppKey, opts...).ToFunc()
}

// ByActiveIP orders the results by the active_ip field.
func ByActiveIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveIP, opts...).ToFunc()
}

// ByDeviceSn orders the results by the device_sn field.
func ByDeviceSn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceSn, opts...).ToFunc()
}

// ByDeviceMAC orders the results by the device_mac field.
func ByDeviceMAC(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceMAC, opts...).ToFunc()
}

// ByDeviceIdentity orders the results by the device_identity field.
func ByDeviceIdentity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceIdentity, opts...).ToFunc()
}

// ByActiveDate orders the results by the active_date field.
func ByActiveDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveDate, opts...).ToFunc()
}

// ByActiveType orders the results by the active_type field.
func ByActiveType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveType, opts...).ToFunc()
}

// ByActiveFile orders the results by the active_file field.
func ByActiveFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveFile, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByExpireDate orders the results by the expire_date field.
func ByExpireDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireDate, opts...).ToFunc()
}

// ByAppSdkID orders the results by the app_sdk_id field.
func ByAppSdkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppSdkID, opts...).ToFunc()
}

// ByImei orders the results by the imei field.
func ByImei(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImei, opts...).ToFunc()
}

// ByAppSdkField orders the results by app_sdk field.
func ByAppSdkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppSdkStep(), sql.OrderByField(field, opts...))
	}
}
func newAppSdkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppSdkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AppSdkTable, AppSdkColumn),
	)
}
