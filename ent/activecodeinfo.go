// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/activecodeinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
)

// ActiveCodeInfo is the model entity for the ActiveCodeInfo schema.
type ActiveCodeInfo struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// 激活码
	ActiveKey string `json:"active_key,omitempty"`
	// 用户id
	UserID string `json:"user_id,omitempty"`
	// appid
	AppID string `json:"app_id,omitempty"`
	// 激活的ip
	ActiveIP string `json:"active_ip,omitempty"`
	// 设备的sn码
	DeviceSn string `json:"device_sn,omitempty"`
	// 设备的mac
	DeviceMAC string `json:"device_mac,omitempty"`
	// 设备的身份
	DeviceIdentity string `json:"device_identity,omitempty"`
	// 激活时间
	ActiveDate time.Time `json:"active_date,omitempty"`
	// 激活类型
	ActiveType int64 `json:"active_type,omitempty"`
	// 激活的文件
	ActiveFile string `json:"active_file,omitempty"`
	// 版本
	Version string `json:"version,omitempty"`
	// 开始时间
	StartDate time.Time `json:"start_date,omitempty"`
	// 结束时间
	ExpireDate time.Time `json:"expire_date,omitempty"`
	// 关联app_key
	AppSkdID uuid.UUID `json:"app_skd_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActiveCodeInfoQuery when eager-loading is set.
	Edges        ActiveCodeInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActiveCodeInfoEdges holds the relations/edges for other nodes in the graph.
type ActiveCodeInfoEdges struct {
	// AppSdk holds the value of the app_sdk edge.
	AppSdk *AppSdk `json:"app_sdk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppSdkOrErr returns the AppSdk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActiveCodeInfoEdges) AppSdkOrErr() (*AppSdk, error) {
	if e.AppSdk != nil {
		return e.AppSdk, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: appsdk.Label}
	}
	return nil, &NotLoadedError{edge: "app_sdk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActiveCodeInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activecodeinfo.FieldStatus, activecodeinfo.FieldActiveType:
			values[i] = new(sql.NullInt64)
		case activecodeinfo.FieldActiveKey, activecodeinfo.FieldUserID, activecodeinfo.FieldAppID, activecodeinfo.FieldActiveIP, activecodeinfo.FieldDeviceSn, activecodeinfo.FieldDeviceMAC, activecodeinfo.FieldDeviceIdentity, activecodeinfo.FieldActiveFile, activecodeinfo.FieldVersion:
			values[i] = new(sql.NullString)
		case activecodeinfo.FieldCreatedAt, activecodeinfo.FieldUpdatedAt, activecodeinfo.FieldActiveDate, activecodeinfo.FieldStartDate, activecodeinfo.FieldExpireDate:
			values[i] = new(sql.NullTime)
		case activecodeinfo.FieldID, activecodeinfo.FieldAppSkdID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActiveCodeInfo fields.
func (aci *ActiveCodeInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activecodeinfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aci.ID = *value
			}
		case activecodeinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aci.CreatedAt = value.Time
			}
		case activecodeinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aci.UpdatedAt = value.Time
			}
		case activecodeinfo.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aci.Status = uint8(value.Int64)
			}
		case activecodeinfo.FieldActiveKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_key", values[i])
			} else if value.Valid {
				aci.ActiveKey = value.String
			}
		case activecodeinfo.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				aci.UserID = value.String
			}
		case activecodeinfo.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				aci.AppID = value.String
			}
		case activecodeinfo.FieldActiveIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_ip", values[i])
			} else if value.Valid {
				aci.ActiveIP = value.String
			}
		case activecodeinfo.FieldDeviceSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_sn", values[i])
			} else if value.Valid {
				aci.DeviceSn = value.String
			}
		case activecodeinfo.FieldDeviceMAC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_mac", values[i])
			} else if value.Valid {
				aci.DeviceMAC = value.String
			}
		case activecodeinfo.FieldDeviceIdentity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_identity", values[i])
			} else if value.Valid {
				aci.DeviceIdentity = value.String
			}
		case activecodeinfo.FieldActiveDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_date", values[i])
			} else if value.Valid {
				aci.ActiveDate = value.Time
			}
		case activecodeinfo.FieldActiveType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field active_type", values[i])
			} else if value.Valid {
				aci.ActiveType = value.Int64
			}
		case activecodeinfo.FieldActiveFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_file", values[i])
			} else if value.Valid {
				aci.ActiveFile = value.String
			}
		case activecodeinfo.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				aci.Version = value.String
			}
		case activecodeinfo.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				aci.StartDate = value.Time
			}
		case activecodeinfo.FieldExpireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_date", values[i])
			} else if value.Valid {
				aci.ExpireDate = value.Time
			}
		case activecodeinfo.FieldAppSkdID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_skd_id", values[i])
			} else if value != nil {
				aci.AppSkdID = *value
			}
		default:
			aci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActiveCodeInfo.
// This includes values selected through modifiers, order, etc.
func (aci *ActiveCodeInfo) Value(name string) (ent.Value, error) {
	return aci.selectValues.Get(name)
}

// QueryAppSdk queries the "app_sdk" edge of the ActiveCodeInfo entity.
func (aci *ActiveCodeInfo) QueryAppSdk() *AppSdkQuery {
	return NewActiveCodeInfoClient(aci.config).QueryAppSdk(aci)
}

// Update returns a builder for updating this ActiveCodeInfo.
// Note that you need to call ActiveCodeInfo.Unwrap() before calling this method if this ActiveCodeInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (aci *ActiveCodeInfo) Update() *ActiveCodeInfoUpdateOne {
	return NewActiveCodeInfoClient(aci.config).UpdateOne(aci)
}

// Unwrap unwraps the ActiveCodeInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aci *ActiveCodeInfo) Unwrap() *ActiveCodeInfo {
	_tx, ok := aci.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActiveCodeInfo is not a transactional entity")
	}
	aci.config.driver = _tx.drv
	return aci
}

// String implements the fmt.Stringer.
func (aci *ActiveCodeInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ActiveCodeInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aci.ID))
	builder.WriteString("created_at=")
	builder.WriteString(aci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", aci.Status))
	builder.WriteString(", ")
	builder.WriteString("active_key=")
	builder.WriteString(aci.ActiveKey)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(aci.UserID)
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(aci.AppID)
	builder.WriteString(", ")
	builder.WriteString("active_ip=")
	builder.WriteString(aci.ActiveIP)
	builder.WriteString(", ")
	builder.WriteString("device_sn=")
	builder.WriteString(aci.DeviceSn)
	builder.WriteString(", ")
	builder.WriteString("device_mac=")
	builder.WriteString(aci.DeviceMAC)
	builder.WriteString(", ")
	builder.WriteString("device_identity=")
	builder.WriteString(aci.DeviceIdentity)
	builder.WriteString(", ")
	builder.WriteString("active_date=")
	builder.WriteString(aci.ActiveDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("active_type=")
	builder.WriteString(fmt.Sprintf("%v", aci.ActiveType))
	builder.WriteString(", ")
	builder.WriteString("active_file=")
	builder.WriteString(aci.ActiveFile)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(aci.Version)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(aci.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expire_date=")
	builder.WriteString(aci.ExpireDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_skd_id=")
	builder.WriteString(fmt.Sprintf("%v", aci.AppSkdID))
	builder.WriteByte(')')
	return builder.String()
}

// ActiveCodeInfos is a parsable slice of ActiveCodeInfo.
type ActiveCodeInfos []*ActiveCodeInfo
