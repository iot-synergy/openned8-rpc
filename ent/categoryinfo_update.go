// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/openned8-rpc/ent/categoryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// CategoryInfoUpdate is the builder for updating CategoryInfo entities.
type CategoryInfoUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryInfoMutation
}

// Where appends a list predicates to the CategoryInfoUpdate builder.
func (ciu *CategoryInfoUpdate) Where(ps ...predicate.CategoryInfo) *CategoryInfoUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *CategoryInfoUpdate) SetUpdatedAt(t time.Time) *CategoryInfoUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetName sets the "name" field.
func (ciu *CategoryInfoUpdate) SetName(s string) *CategoryInfoUpdate {
	ciu.mutation.SetName(s)
	return ciu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciu *CategoryInfoUpdate) SetNillableName(s *string) *CategoryInfoUpdate {
	if s != nil {
		ciu.SetName(*s)
	}
	return ciu
}

// Mutation returns the CategoryInfoMutation object of the builder.
func (ciu *CategoryInfoUpdate) Mutation() *CategoryInfoMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CategoryInfoUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CategoryInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CategoryInfoUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CategoryInfoUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *CategoryInfoUpdate) defaults() {
	if _, ok := ciu.mutation.UpdatedAt(); !ok {
		v := categoryinfo.UpdateDefaultUpdatedAt()
		ciu.mutation.SetUpdatedAt(v)
	}
}

func (ciu *CategoryInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(categoryinfo.Table, categoryinfo.Columns, sqlgraph.NewFieldSpec(categoryinfo.FieldID, field.TypeUint64))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(categoryinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.Name(); ok {
		_spec.SetField(categoryinfo.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categoryinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// CategoryInfoUpdateOne is the builder for updating a single CategoryInfo entity.
type CategoryInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *CategoryInfoUpdateOne) SetUpdatedAt(t time.Time) *CategoryInfoUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetName sets the "name" field.
func (ciuo *CategoryInfoUpdateOne) SetName(s string) *CategoryInfoUpdateOne {
	ciuo.mutation.SetName(s)
	return ciuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciuo *CategoryInfoUpdateOne) SetNillableName(s *string) *CategoryInfoUpdateOne {
	if s != nil {
		ciuo.SetName(*s)
	}
	return ciuo
}

// Mutation returns the CategoryInfoMutation object of the builder.
func (ciuo *CategoryInfoUpdateOne) Mutation() *CategoryInfoMutation {
	return ciuo.mutation
}

// Where appends a list predicates to the CategoryInfoUpdate builder.
func (ciuo *CategoryInfoUpdateOne) Where(ps ...predicate.CategoryInfo) *CategoryInfoUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CategoryInfoUpdateOne) Select(field string, fields ...string) *CategoryInfoUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CategoryInfo entity.
func (ciuo *CategoryInfoUpdateOne) Save(ctx context.Context) (*CategoryInfo, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CategoryInfoUpdateOne) SaveX(ctx context.Context) *CategoryInfo {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CategoryInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CategoryInfoUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *CategoryInfoUpdateOne) defaults() {
	if _, ok := ciuo.mutation.UpdatedAt(); !ok {
		v := categoryinfo.UpdateDefaultUpdatedAt()
		ciuo.mutation.SetUpdatedAt(v)
	}
}

func (ciuo *CategoryInfoUpdateOne) sqlSave(ctx context.Context) (_node *CategoryInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(categoryinfo.Table, categoryinfo.Columns, sqlgraph.NewFieldSpec(categoryinfo.FieldID, field.TypeUint64))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CategoryInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categoryinfo.FieldID)
		for _, f := range fields {
			if !categoryinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categoryinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(categoryinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.Name(); ok {
		_spec.SetField(categoryinfo.FieldName, field.TypeString, value)
	}
	_node = &CategoryInfo{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categoryinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
