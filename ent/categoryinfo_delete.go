// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/openned8-rpc/ent/categoryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// CategoryInfoDelete is the builder for deleting a CategoryInfo entity.
type CategoryInfoDelete struct {
	config
	hooks    []Hook
	mutation *CategoryInfoMutation
}

// Where appends a list predicates to the CategoryInfoDelete builder.
func (cid *CategoryInfoDelete) Where(ps ...predicate.CategoryInfo) *CategoryInfoDelete {
	cid.mutation.Where(ps...)
	return cid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cid *CategoryInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cid.sqlExec, cid.mutation, cid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cid *CategoryInfoDelete) ExecX(ctx context.Context) int {
	n, err := cid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cid *CategoryInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(categoryinfo.Table, sqlgraph.NewFieldSpec(categoryinfo.FieldID, field.TypeUint64))
	if ps := cid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cid.mutation.done = true
	return affected, err
}

// CategoryInfoDeleteOne is the builder for deleting a single CategoryInfo entity.
type CategoryInfoDeleteOne struct {
	cid *CategoryInfoDelete
}

// Where appends a list predicates to the CategoryInfoDelete builder.
func (cido *CategoryInfoDeleteOne) Where(ps ...predicate.CategoryInfo) *CategoryInfoDeleteOne {
	cido.cid.mutation.Where(ps...)
	return cido
}

// Exec executes the deletion query.
func (cido *CategoryInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := cido.cid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{categoryinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cido *CategoryInfoDeleteOne) ExecX(ctx context.Context) {
	if err := cido.Exec(ctx); err != nil {
		panic(err)
	}
}
