// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
)

// AppInfoCreate is the builder for creating a AppInfo entity.
type AppInfoCreate struct {
	config
	mutation *AppInfoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (aic *AppInfoCreate) SetCreatedAt(t time.Time) *AppInfoCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableCreatedAt(t *time.Time) *AppInfoCreate {
	if t != nil {
		aic.SetCreatedAt(*t)
	}
	return aic
}

// SetUpdatedAt sets the "updated_at" field.
func (aic *AppInfoCreate) SetUpdatedAt(t time.Time) *AppInfoCreate {
	aic.mutation.SetUpdatedAt(t)
	return aic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableUpdatedAt(t *time.Time) *AppInfoCreate {
	if t != nil {
		aic.SetUpdatedAt(*t)
	}
	return aic
}

// SetUserID sets the "user_id" field.
func (aic *AppInfoCreate) SetUserID(s string) *AppInfoCreate {
	aic.mutation.SetUserID(s)
	return aic
}

// SetAppName sets the "app_name" field.
func (aic *AppInfoCreate) SetAppName(s string) *AppInfoCreate {
	aic.mutation.SetAppName(s)
	return aic
}

// SetSummary sets the "summary" field.
func (aic *AppInfoCreate) SetSummary(s string) *AppInfoCreate {
	aic.mutation.SetSummary(s)
	return aic
}

// SetAppCategory sets the "app_category" field.
func (aic *AppInfoCreate) SetAppCategory(i int64) *AppInfoCreate {
	aic.mutation.SetAppCategory(i)
	return aic
}

// SetUseIndustry sets the "use_industry" field.
func (aic *AppInfoCreate) SetUseIndustry(i int64) *AppInfoCreate {
	aic.mutation.SetUseIndustry(i)
	return aic
}

// SetAppCategoryName sets the "app_category_name" field.
func (aic *AppInfoCreate) SetAppCategoryName(s string) *AppInfoCreate {
	aic.mutation.SetAppCategoryName(s)
	return aic
}

// SetUseIndustryName sets the "use_industry_name" field.
func (aic *AppInfoCreate) SetUseIndustryName(s string) *AppInfoCreate {
	aic.mutation.SetUseIndustryName(s)
	return aic
}

// SetAppKey sets the "app_key" field.
func (aic *AppInfoCreate) SetAppKey(s string) *AppInfoCreate {
	aic.mutation.SetAppKey(s)
	return aic
}

// SetAppSecret sets the "app_secret" field.
func (aic *AppInfoCreate) SetAppSecret(s string) *AppInfoCreate {
	aic.mutation.SetAppSecret(s)
	return aic
}

// SetID sets the "id" field.
func (aic *AppInfoCreate) SetID(s string) *AppInfoCreate {
	aic.mutation.SetID(s)
	return aic
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by IDs.
func (aic *AppInfoCreate) AddAppSdkIDs(ids ...uuid.UUID) *AppInfoCreate {
	aic.mutation.AddAppSdkIDs(ids...)
	return aic
}

// AddAppSdk adds the "app_sdk" edges to the AppSdk entity.
func (aic *AppInfoCreate) AddAppSdk(a ...*AppSdk) *AppInfoCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aic.AddAppSdkIDs(ids...)
}

// Mutation returns the AppInfoMutation object of the builder.
func (aic *AppInfoCreate) Mutation() *AppInfoMutation {
	return aic.mutation
}

// Save creates the AppInfo in the database.
func (aic *AppInfoCreate) Save(ctx context.Context) (*AppInfo, error) {
	aic.defaults()
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AppInfoCreate) SaveX(ctx context.Context) *AppInfo {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AppInfoCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AppInfoCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AppInfoCreate) defaults() {
	if _, ok := aic.mutation.CreatedAt(); !ok {
		v := appinfo.DefaultCreatedAt()
		aic.mutation.SetCreatedAt(v)
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		v := appinfo.DefaultUpdatedAt()
		aic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AppInfoCreate) check() error {
	if _, ok := aic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppInfo.created_at"`)}
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppInfo.updated_at"`)}
	}
	if _, ok := aic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppInfo.user_id"`)}
	}
	if _, ok := aic.mutation.AppName(); !ok {
		return &ValidationError{Name: "app_name", err: errors.New(`ent: missing required field "AppInfo.app_name"`)}
	}
	if _, ok := aic.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "AppInfo.summary"`)}
	}
	if _, ok := aic.mutation.AppCategory(); !ok {
		return &ValidationError{Name: "app_category", err: errors.New(`ent: missing required field "AppInfo.app_category"`)}
	}
	if _, ok := aic.mutation.UseIndustry(); !ok {
		return &ValidationError{Name: "use_industry", err: errors.New(`ent: missing required field "AppInfo.use_industry"`)}
	}
	if _, ok := aic.mutation.AppCategoryName(); !ok {
		return &ValidationError{Name: "app_category_name", err: errors.New(`ent: missing required field "AppInfo.app_category_name"`)}
	}
	if _, ok := aic.mutation.UseIndustryName(); !ok {
		return &ValidationError{Name: "use_industry_name", err: errors.New(`ent: missing required field "AppInfo.use_industry_name"`)}
	}
	if _, ok := aic.mutation.AppKey(); !ok {
		return &ValidationError{Name: "app_key", err: errors.New(`ent: missing required field "AppInfo.app_key"`)}
	}
	if _, ok := aic.mutation.AppSecret(); !ok {
		return &ValidationError{Name: "app_secret", err: errors.New(`ent: missing required field "AppInfo.app_secret"`)}
	}
	return nil
}

func (aic *AppInfoCreate) sqlSave(ctx context.Context) (*AppInfo, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppInfo.ID type: %T", _spec.ID.Value)
		}
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AppInfoCreate) createSpec() (*AppInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &AppInfo{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(appinfo.Table, sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeString))
	)
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.SetField(appinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aic.mutation.UpdatedAt(); ok {
		_spec.SetField(appinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aic.mutation.UserID(); ok {
		_spec.SetField(appinfo.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := aic.mutation.AppName(); ok {
		_spec.SetField(appinfo.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := aic.mutation.Summary(); ok {
		_spec.SetField(appinfo.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := aic.mutation.AppCategory(); ok {
		_spec.SetField(appinfo.FieldAppCategory, field.TypeInt64, value)
		_node.AppCategory = value
	}
	if value, ok := aic.mutation.UseIndustry(); ok {
		_spec.SetField(appinfo.FieldUseIndustry, field.TypeInt64, value)
		_node.UseIndustry = value
	}
	if value, ok := aic.mutation.AppCategoryName(); ok {
		_spec.SetField(appinfo.FieldAppCategoryName, field.TypeString, value)
		_node.AppCategoryName = value
	}
	if value, ok := aic.mutation.UseIndustryName(); ok {
		_spec.SetField(appinfo.FieldUseIndustryName, field.TypeString, value)
		_node.UseIndustryName = value
	}
	if value, ok := aic.mutation.AppKey(); ok {
		_spec.SetField(appinfo.FieldAppKey, field.TypeString, value)
		_node.AppKey = value
	}
	if value, ok := aic.mutation.AppSecret(); ok {
		_spec.SetField(appinfo.FieldAppSecret, field.TypeString, value)
		_node.AppSecret = value
	}
	if nodes := aic.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppInfoCreateBulk is the builder for creating many AppInfo entities in bulk.
type AppInfoCreateBulk struct {
	config
	err      error
	builders []*AppInfoCreate
}

// Save creates the AppInfo entities in the database.
func (aicb *AppInfoCreateBulk) Save(ctx context.Context) ([]*AppInfo, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AppInfo, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AppInfoCreateBulk) SaveX(ctx context.Context) []*AppInfo {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AppInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AppInfoCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
