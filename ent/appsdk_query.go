// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/activecodeinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
	"github.com/iot-synergy/openned8-rpc/ent/sdkinfo"
)

// AppSdkQuery is the builder for querying AppSdk entities.
type AppSdkQuery struct {
	config
	ctx            *QueryContext
	order          []appsdk.OrderOption
	inters         []Interceptor
	predicates     []predicate.AppSdk
	withActiveCode *ActiveCodeInfoQuery
	withAppInfo    *AppInfoQuery
	withSdkInfo    *SdkInfoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppSdkQuery builder.
func (asq *AppSdkQuery) Where(ps ...predicate.AppSdk) *AppSdkQuery {
	asq.predicates = append(asq.predicates, ps...)
	return asq
}

// Limit the number of records to be returned by this query.
func (asq *AppSdkQuery) Limit(limit int) *AppSdkQuery {
	asq.ctx.Limit = &limit
	return asq
}

// Offset to start from.
func (asq *AppSdkQuery) Offset(offset int) *AppSdkQuery {
	asq.ctx.Offset = &offset
	return asq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (asq *AppSdkQuery) Unique(unique bool) *AppSdkQuery {
	asq.ctx.Unique = &unique
	return asq
}

// Order specifies how the records should be ordered.
func (asq *AppSdkQuery) Order(o ...appsdk.OrderOption) *AppSdkQuery {
	asq.order = append(asq.order, o...)
	return asq
}

// QueryActiveCode chains the current query on the "active_code" edge.
func (asq *AppSdkQuery) QueryActiveCode() *ActiveCodeInfoQuery {
	query := (&ActiveCodeInfoClient{config: asq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appsdk.Table, appsdk.FieldID, selector),
			sqlgraph.To(activecodeinfo.Table, activecodeinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appsdk.ActiveCodeTable, appsdk.ActiveCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppInfo chains the current query on the "app_info" edge.
func (asq *AppSdkQuery) QueryAppInfo() *AppInfoQuery {
	query := (&AppInfoClient{config: asq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appsdk.Table, appsdk.FieldID, selector),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appsdk.AppInfoTable, appsdk.AppInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySdkInfo chains the current query on the "sdk_info" edge.
func (asq *AppSdkQuery) QuerySdkInfo() *SdkInfoQuery {
	query := (&SdkInfoClient{config: asq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appsdk.Table, appsdk.FieldID, selector),
			sqlgraph.To(sdkinfo.Table, sdkinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appsdk.SdkInfoTable, appsdk.SdkInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppSdk entity from the query.
// Returns a *NotFoundError when no AppSdk was found.
func (asq *AppSdkQuery) First(ctx context.Context) (*AppSdk, error) {
	nodes, err := asq.Limit(1).All(setContextOp(ctx, asq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appsdk.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asq *AppSdkQuery) FirstX(ctx context.Context) *AppSdk {
	node, err := asq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppSdk ID from the query.
// Returns a *NotFoundError when no AppSdk ID was found.
func (asq *AppSdkQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = asq.Limit(1).IDs(setContextOp(ctx, asq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appsdk.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (asq *AppSdkQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := asq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppSdk entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AppSdk entity is found.
// Returns a *NotFoundError when no AppSdk entities are found.
func (asq *AppSdkQuery) Only(ctx context.Context) (*AppSdk, error) {
	nodes, err := asq.Limit(2).All(setContextOp(ctx, asq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appsdk.Label}
	default:
		return nil, &NotSingularError{appsdk.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asq *AppSdkQuery) OnlyX(ctx context.Context) *AppSdk {
	node, err := asq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppSdk ID in the query.
// Returns a *NotSingularError when more than one AppSdk ID is found.
// Returns a *NotFoundError when no entities are found.
func (asq *AppSdkQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = asq.Limit(2).IDs(setContextOp(ctx, asq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appsdk.Label}
	default:
		err = &NotSingularError{appsdk.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (asq *AppSdkQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := asq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppSdks.
func (asq *AppSdkQuery) All(ctx context.Context) ([]*AppSdk, error) {
	ctx = setContextOp(ctx, asq.ctx, "All")
	if err := asq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AppSdk, *AppSdkQuery]()
	return withInterceptors[[]*AppSdk](ctx, asq, qr, asq.inters)
}

// AllX is like All, but panics if an error occurs.
func (asq *AppSdkQuery) AllX(ctx context.Context) []*AppSdk {
	nodes, err := asq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppSdk IDs.
func (asq *AppSdkQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if asq.ctx.Unique == nil && asq.path != nil {
		asq.Unique(true)
	}
	ctx = setContextOp(ctx, asq.ctx, "IDs")
	if err = asq.Select(appsdk.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (asq *AppSdkQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := asq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (asq *AppSdkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, asq.ctx, "Count")
	if err := asq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, asq, querierCount[*AppSdkQuery](), asq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (asq *AppSdkQuery) CountX(ctx context.Context) int {
	count, err := asq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asq *AppSdkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, asq.ctx, "Exist")
	switch _, err := asq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (asq *AppSdkQuery) ExistX(ctx context.Context) bool {
	exist, err := asq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppSdkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asq *AppSdkQuery) Clone() *AppSdkQuery {
	if asq == nil {
		return nil
	}
	return &AppSdkQuery{
		config:         asq.config,
		ctx:            asq.ctx.Clone(),
		order:          append([]appsdk.OrderOption{}, asq.order...),
		inters:         append([]Interceptor{}, asq.inters...),
		predicates:     append([]predicate.AppSdk{}, asq.predicates...),
		withActiveCode: asq.withActiveCode.Clone(),
		withAppInfo:    asq.withAppInfo.Clone(),
		withSdkInfo:    asq.withSdkInfo.Clone(),
		// clone intermediate query.
		sql:  asq.sql.Clone(),
		path: asq.path,
	}
}

// WithActiveCode tells the query-builder to eager-load the nodes that are connected to
// the "active_code" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AppSdkQuery) WithActiveCode(opts ...func(*ActiveCodeInfoQuery)) *AppSdkQuery {
	query := (&ActiveCodeInfoClient{config: asq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asq.withActiveCode = query
	return asq
}

// WithAppInfo tells the query-builder to eager-load the nodes that are connected to
// the "app_info" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AppSdkQuery) WithAppInfo(opts ...func(*AppInfoQuery)) *AppSdkQuery {
	query := (&AppInfoClient{config: asq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asq.withAppInfo = query
	return asq
}

// WithSdkInfo tells the query-builder to eager-load the nodes that are connected to
// the "sdk_info" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AppSdkQuery) WithSdkInfo(opts ...func(*SdkInfoQuery)) *AppSdkQuery {
	query := (&SdkInfoClient{config: asq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asq.withSdkInfo = query
	return asq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppSdk.Query().
//		GroupBy(appsdk.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (asq *AppSdkQuery) GroupBy(field string, fields ...string) *AppSdkGroupBy {
	asq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppSdkGroupBy{build: asq}
	grbuild.flds = &asq.ctx.Fields
	grbuild.label = appsdk.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AppSdk.Query().
//		Select(appsdk.FieldCreatedAt).
//		Scan(ctx, &v)
func (asq *AppSdkQuery) Select(fields ...string) *AppSdkSelect {
	asq.ctx.Fields = append(asq.ctx.Fields, fields...)
	sbuild := &AppSdkSelect{AppSdkQuery: asq}
	sbuild.label = appsdk.Label
	sbuild.flds, sbuild.scan = &asq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppSdkSelect configured with the given aggregations.
func (asq *AppSdkQuery) Aggregate(fns ...AggregateFunc) *AppSdkSelect {
	return asq.Select().Aggregate(fns...)
}

func (asq *AppSdkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range asq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, asq); err != nil {
				return err
			}
		}
	}
	for _, f := range asq.ctx.Fields {
		if !appsdk.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asq.path != nil {
		prev, err := asq.path(ctx)
		if err != nil {
			return err
		}
		asq.sql = prev
	}
	return nil
}

func (asq *AppSdkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AppSdk, error) {
	var (
		nodes       = []*AppSdk{}
		_spec       = asq.querySpec()
		loadedTypes = [3]bool{
			asq.withActiveCode != nil,
			asq.withAppInfo != nil,
			asq.withSdkInfo != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AppSdk).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AppSdk{config: asq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, asq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := asq.withActiveCode; query != nil {
		if err := asq.loadActiveCode(ctx, query, nodes,
			func(n *AppSdk) { n.Edges.ActiveCode = []*ActiveCodeInfo{} },
			func(n *AppSdk, e *ActiveCodeInfo) { n.Edges.ActiveCode = append(n.Edges.ActiveCode, e) }); err != nil {
			return nil, err
		}
	}
	if query := asq.withAppInfo; query != nil {
		if err := asq.loadAppInfo(ctx, query, nodes, nil,
			func(n *AppSdk, e *AppInfo) { n.Edges.AppInfo = e }); err != nil {
			return nil, err
		}
	}
	if query := asq.withSdkInfo; query != nil {
		if err := asq.loadSdkInfo(ctx, query, nodes, nil,
			func(n *AppSdk, e *SdkInfo) { n.Edges.SdkInfo = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (asq *AppSdkQuery) loadActiveCode(ctx context.Context, query *ActiveCodeInfoQuery, nodes []*AppSdk, init func(*AppSdk), assign func(*AppSdk, *ActiveCodeInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*AppSdk)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(activecodeinfo.FieldAppSdkID)
	}
	query.Where(predicate.ActiveCodeInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(appsdk.ActiveCodeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppSdkID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_sdk_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (asq *AppSdkQuery) loadAppInfo(ctx context.Context, query *AppInfoQuery, nodes []*AppSdk, init func(*AppSdk), assign func(*AppSdk, *AppInfo)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AppSdk)
	for i := range nodes {
		fk := nodes[i].App
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(appinfo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (asq *AppSdkQuery) loadSdkInfo(ctx context.Context, query *SdkInfoQuery, nodes []*AppSdk, init func(*AppSdk), assign func(*AppSdk, *SdkInfo)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AppSdk)
	for i := range nodes {
		fk := nodes[i].Sdk
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sdkinfo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sdk" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (asq *AppSdkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asq.querySpec()
	_spec.Node.Columns = asq.ctx.Fields
	if len(asq.ctx.Fields) > 0 {
		_spec.Unique = asq.ctx.Unique != nil && *asq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, asq.driver, _spec)
}

func (asq *AppSdkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(appsdk.Table, appsdk.Columns, sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID))
	_spec.From = asq.sql
	if unique := asq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if asq.path != nil {
		_spec.Unique = true
	}
	if fields := asq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsdk.FieldID)
		for i := range fields {
			if fields[i] != appsdk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if asq.withAppInfo != nil {
			_spec.Node.AddColumnOnce(appsdk.FieldApp)
		}
		if asq.withSdkInfo != nil {
			_spec.Node.AddColumnOnce(appsdk.FieldSdk)
		}
	}
	if ps := asq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (asq *AppSdkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(asq.driver.Dialect())
	t1 := builder.Table(appsdk.Table)
	columns := asq.ctx.Fields
	if len(columns) == 0 {
		columns = appsdk.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if asq.sql != nil {
		selector = asq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if asq.ctx.Unique != nil && *asq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range asq.predicates {
		p(selector)
	}
	for _, p := range asq.order {
		p(selector)
	}
	if offset := asq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppSdkGroupBy is the group-by builder for AppSdk entities.
type AppSdkGroupBy struct {
	selector
	build *AppSdkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asgb *AppSdkGroupBy) Aggregate(fns ...AggregateFunc) *AppSdkGroupBy {
	asgb.fns = append(asgb.fns, fns...)
	return asgb
}

// Scan applies the selector query and scans the result into the given value.
func (asgb *AppSdkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, asgb.build.ctx, "GroupBy")
	if err := asgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppSdkQuery, *AppSdkGroupBy](ctx, asgb.build, asgb, asgb.build.inters, v)
}

func (asgb *AppSdkGroupBy) sqlScan(ctx context.Context, root *AppSdkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(asgb.fns))
	for _, fn := range asgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*asgb.flds)+len(asgb.fns))
		for _, f := range *asgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*asgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppSdkSelect is the builder for selecting fields of AppSdk entities.
type AppSdkSelect struct {
	*AppSdkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ass *AppSdkSelect) Aggregate(fns ...AggregateFunc) *AppSdkSelect {
	ass.fns = append(ass.fns, fns...)
	return ass
}

// Scan applies the selector query and scans the result into the given value.
func (ass *AppSdkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ass.ctx, "Select")
	if err := ass.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppSdkQuery, *AppSdkSelect](ctx, ass.AppSdkQuery, ass, ass.inters, v)
}

func (ass *AppSdkSelect) sqlScan(ctx context.Context, root *AppSdkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ass.fns))
	for _, fn := range ass.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ass.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ass.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
