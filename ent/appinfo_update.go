// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// AppInfoUpdate is the builder for updating AppInfo entities.
type AppInfoUpdate struct {
	config
	hooks    []Hook
	mutation *AppInfoMutation
}

// Where appends a list predicates to the AppInfoUpdate builder.
func (aiu *AppInfoUpdate) Where(ps ...predicate.AppInfo) *AppInfoUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *AppInfoUpdate) SetUpdatedAt(t time.Time) *AppInfoUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// SetUserID sets the "user_id" field.
func (aiu *AppInfoUpdate) SetUserID(s string) *AppInfoUpdate {
	aiu.mutation.SetUserID(s)
	return aiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableUserID(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetUserID(*s)
	}
	return aiu
}

// SetAppName sets the "app_name" field.
func (aiu *AppInfoUpdate) SetAppName(s string) *AppInfoUpdate {
	aiu.mutation.SetAppName(s)
	return aiu
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableAppName(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetAppName(*s)
	}
	return aiu
}

// SetSummary sets the "summary" field.
func (aiu *AppInfoUpdate) SetSummary(s string) *AppInfoUpdate {
	aiu.mutation.SetSummary(s)
	return aiu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableSummary(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetSummary(*s)
	}
	return aiu
}

// SetAppCategory sets the "app_category" field.
func (aiu *AppInfoUpdate) SetAppCategory(i int64) *AppInfoUpdate {
	aiu.mutation.ResetAppCategory()
	aiu.mutation.SetAppCategory(i)
	return aiu
}

// SetNillableAppCategory sets the "app_category" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableAppCategory(i *int64) *AppInfoUpdate {
	if i != nil {
		aiu.SetAppCategory(*i)
	}
	return aiu
}

// AddAppCategory adds i to the "app_category" field.
func (aiu *AppInfoUpdate) AddAppCategory(i int64) *AppInfoUpdate {
	aiu.mutation.AddAppCategory(i)
	return aiu
}

// SetUseIndustry sets the "use_industry" field.
func (aiu *AppInfoUpdate) SetUseIndustry(i int64) *AppInfoUpdate {
	aiu.mutation.ResetUseIndustry()
	aiu.mutation.SetUseIndustry(i)
	return aiu
}

// SetNillableUseIndustry sets the "use_industry" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableUseIndustry(i *int64) *AppInfoUpdate {
	if i != nil {
		aiu.SetUseIndustry(*i)
	}
	return aiu
}

// AddUseIndustry adds i to the "use_industry" field.
func (aiu *AppInfoUpdate) AddUseIndustry(i int64) *AppInfoUpdate {
	aiu.mutation.AddUseIndustry(i)
	return aiu
}

// SetAppCategoryName sets the "app_category_name" field.
func (aiu *AppInfoUpdate) SetAppCategoryName(s string) *AppInfoUpdate {
	aiu.mutation.SetAppCategoryName(s)
	return aiu
}

// SetNillableAppCategoryName sets the "app_category_name" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableAppCategoryName(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetAppCategoryName(*s)
	}
	return aiu
}

// SetUseIndustryName sets the "use_industry_name" field.
func (aiu *AppInfoUpdate) SetUseIndustryName(s string) *AppInfoUpdate {
	aiu.mutation.SetUseIndustryName(s)
	return aiu
}

// SetNillableUseIndustryName sets the "use_industry_name" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableUseIndustryName(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetUseIndustryName(*s)
	}
	return aiu
}

// SetAppKey sets the "app_key" field.
func (aiu *AppInfoUpdate) SetAppKey(s string) *AppInfoUpdate {
	aiu.mutation.SetAppKey(s)
	return aiu
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableAppKey(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetAppKey(*s)
	}
	return aiu
}

// SetAppSecret sets the "app_secret" field.
func (aiu *AppInfoUpdate) SetAppSecret(s string) *AppInfoUpdate {
	aiu.mutation.SetAppSecret(s)
	return aiu
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableAppSecret(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetAppSecret(*s)
	}
	return aiu
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by IDs.
func (aiu *AppInfoUpdate) AddAppSdkIDs(ids ...uuid.UUID) *AppInfoUpdate {
	aiu.mutation.AddAppSdkIDs(ids...)
	return aiu
}

// AddAppSdk adds the "app_sdk" edges to the AppSdk entity.
func (aiu *AppInfoUpdate) AddAppSdk(a ...*AppSdk) *AppInfoUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.AddAppSdkIDs(ids...)
}

// Mutation returns the AppInfoMutation object of the builder.
func (aiu *AppInfoUpdate) Mutation() *AppInfoMutation {
	return aiu.mutation
}

// ClearAppSdk clears all "app_sdk" edges to the AppSdk entity.
func (aiu *AppInfoUpdate) ClearAppSdk() *AppInfoUpdate {
	aiu.mutation.ClearAppSdk()
	return aiu
}

// RemoveAppSdkIDs removes the "app_sdk" edge to AppSdk entities by IDs.
func (aiu *AppInfoUpdate) RemoveAppSdkIDs(ids ...uuid.UUID) *AppInfoUpdate {
	aiu.mutation.RemoveAppSdkIDs(ids...)
	return aiu
}

// RemoveAppSdk removes "app_sdk" edges to AppSdk entities.
func (aiu *AppInfoUpdate) RemoveAppSdk(a ...*AppSdk) *AppInfoUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.RemoveAppSdkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AppInfoUpdate) Save(ctx context.Context) (int, error) {
	aiu.defaults()
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AppInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AppInfoUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AppInfoUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiu *AppInfoUpdate) defaults() {
	if _, ok := aiu.mutation.UpdatedAt(); !ok {
		v := appinfo.UpdateDefaultUpdatedAt()
		aiu.mutation.SetUpdatedAt(v)
	}
}

func (aiu *AppInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appinfo.Table, appinfo.Columns, sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeUUID))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(appinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.UserID(); ok {
		_spec.SetField(appinfo.FieldUserID, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AppName(); ok {
		_spec.SetField(appinfo.FieldAppName, field.TypeString, value)
	}
	if value, ok := aiu.mutation.Summary(); ok {
		_spec.SetField(appinfo.FieldSummary, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AppCategory(); ok {
		_spec.SetField(appinfo.FieldAppCategory, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.AddedAppCategory(); ok {
		_spec.AddField(appinfo.FieldAppCategory, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.UseIndustry(); ok {
		_spec.SetField(appinfo.FieldUseIndustry, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.AddedUseIndustry(); ok {
		_spec.AddField(appinfo.FieldUseIndustry, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.AppCategoryName(); ok {
		_spec.SetField(appinfo.FieldAppCategoryName, field.TypeString, value)
	}
	if value, ok := aiu.mutation.UseIndustryName(); ok {
		_spec.SetField(appinfo.FieldUseIndustryName, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AppKey(); ok {
		_spec.SetField(appinfo.FieldAppKey, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AppSecret(); ok {
		_spec.SetField(appinfo.FieldAppSecret, field.TypeString, value)
	}
	if aiu.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedAppSdkIDs(); len(nodes) > 0 && !aiu.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// AppInfoUpdateOne is the builder for updating a single AppInfo entity.
type AppInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *AppInfoUpdateOne) SetUpdatedAt(t time.Time) *AppInfoUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// SetUserID sets the "user_id" field.
func (aiuo *AppInfoUpdateOne) SetUserID(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetUserID(s)
	return aiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableUserID(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetUserID(*s)
	}
	return aiuo
}

// SetAppName sets the "app_name" field.
func (aiuo *AppInfoUpdateOne) SetAppName(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetAppName(s)
	return aiuo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableAppName(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetAppName(*s)
	}
	return aiuo
}

// SetSummary sets the "summary" field.
func (aiuo *AppInfoUpdateOne) SetSummary(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetSummary(s)
	return aiuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableSummary(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetSummary(*s)
	}
	return aiuo
}

// SetAppCategory sets the "app_category" field.
func (aiuo *AppInfoUpdateOne) SetAppCategory(i int64) *AppInfoUpdateOne {
	aiuo.mutation.ResetAppCategory()
	aiuo.mutation.SetAppCategory(i)
	return aiuo
}

// SetNillableAppCategory sets the "app_category" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableAppCategory(i *int64) *AppInfoUpdateOne {
	if i != nil {
		aiuo.SetAppCategory(*i)
	}
	return aiuo
}

// AddAppCategory adds i to the "app_category" field.
func (aiuo *AppInfoUpdateOne) AddAppCategory(i int64) *AppInfoUpdateOne {
	aiuo.mutation.AddAppCategory(i)
	return aiuo
}

// SetUseIndustry sets the "use_industry" field.
func (aiuo *AppInfoUpdateOne) SetUseIndustry(i int64) *AppInfoUpdateOne {
	aiuo.mutation.ResetUseIndustry()
	aiuo.mutation.SetUseIndustry(i)
	return aiuo
}

// SetNillableUseIndustry sets the "use_industry" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableUseIndustry(i *int64) *AppInfoUpdateOne {
	if i != nil {
		aiuo.SetUseIndustry(*i)
	}
	return aiuo
}

// AddUseIndustry adds i to the "use_industry" field.
func (aiuo *AppInfoUpdateOne) AddUseIndustry(i int64) *AppInfoUpdateOne {
	aiuo.mutation.AddUseIndustry(i)
	return aiuo
}

// SetAppCategoryName sets the "app_category_name" field.
func (aiuo *AppInfoUpdateOne) SetAppCategoryName(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetAppCategoryName(s)
	return aiuo
}

// SetNillableAppCategoryName sets the "app_category_name" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableAppCategoryName(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetAppCategoryName(*s)
	}
	return aiuo
}

// SetUseIndustryName sets the "use_industry_name" field.
func (aiuo *AppInfoUpdateOne) SetUseIndustryName(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetUseIndustryName(s)
	return aiuo
}

// SetNillableUseIndustryName sets the "use_industry_name" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableUseIndustryName(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetUseIndustryName(*s)
	}
	return aiuo
}

// SetAppKey sets the "app_key" field.
func (aiuo *AppInfoUpdateOne) SetAppKey(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetAppKey(s)
	return aiuo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableAppKey(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetAppKey(*s)
	}
	return aiuo
}

// SetAppSecret sets the "app_secret" field.
func (aiuo *AppInfoUpdateOne) SetAppSecret(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetAppSecret(s)
	return aiuo
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableAppSecret(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetAppSecret(*s)
	}
	return aiuo
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by IDs.
func (aiuo *AppInfoUpdateOne) AddAppSdkIDs(ids ...uuid.UUID) *AppInfoUpdateOne {
	aiuo.mutation.AddAppSdkIDs(ids...)
	return aiuo
}

// AddAppSdk adds the "app_sdk" edges to the AppSdk entity.
func (aiuo *AppInfoUpdateOne) AddAppSdk(a ...*AppSdk) *AppInfoUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.AddAppSdkIDs(ids...)
}

// Mutation returns the AppInfoMutation object of the builder.
func (aiuo *AppInfoUpdateOne) Mutation() *AppInfoMutation {
	return aiuo.mutation
}

// ClearAppSdk clears all "app_sdk" edges to the AppSdk entity.
func (aiuo *AppInfoUpdateOne) ClearAppSdk() *AppInfoUpdateOne {
	aiuo.mutation.ClearAppSdk()
	return aiuo
}

// RemoveAppSdkIDs removes the "app_sdk" edge to AppSdk entities by IDs.
func (aiuo *AppInfoUpdateOne) RemoveAppSdkIDs(ids ...uuid.UUID) *AppInfoUpdateOne {
	aiuo.mutation.RemoveAppSdkIDs(ids...)
	return aiuo
}

// RemoveAppSdk removes "app_sdk" edges to AppSdk entities.
func (aiuo *AppInfoUpdateOne) RemoveAppSdk(a ...*AppSdk) *AppInfoUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.RemoveAppSdkIDs(ids...)
}

// Where appends a list predicates to the AppInfoUpdate builder.
func (aiuo *AppInfoUpdateOne) Where(ps ...predicate.AppInfo) *AppInfoUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AppInfoUpdateOne) Select(field string, fields ...string) *AppInfoUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated AppInfo entity.
func (aiuo *AppInfoUpdateOne) Save(ctx context.Context) (*AppInfo, error) {
	aiuo.defaults()
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AppInfoUpdateOne) SaveX(ctx context.Context) *AppInfo {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AppInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AppInfoUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiuo *AppInfoUpdateOne) defaults() {
	if _, ok := aiuo.mutation.UpdatedAt(); !ok {
		v := appinfo.UpdateDefaultUpdatedAt()
		aiuo.mutation.SetUpdatedAt(v)
	}
}

func (aiuo *AppInfoUpdateOne) sqlSave(ctx context.Context) (_node *AppInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(appinfo.Table, appinfo.Columns, sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeUUID))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appinfo.FieldID)
		for _, f := range fields {
			if !appinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.UserID(); ok {
		_spec.SetField(appinfo.FieldUserID, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AppName(); ok {
		_spec.SetField(appinfo.FieldAppName, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.Summary(); ok {
		_spec.SetField(appinfo.FieldSummary, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AppCategory(); ok {
		_spec.SetField(appinfo.FieldAppCategory, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.AddedAppCategory(); ok {
		_spec.AddField(appinfo.FieldAppCategory, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.UseIndustry(); ok {
		_spec.SetField(appinfo.FieldUseIndustry, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.AddedUseIndustry(); ok {
		_spec.AddField(appinfo.FieldUseIndustry, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.AppCategoryName(); ok {
		_spec.SetField(appinfo.FieldAppCategoryName, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.UseIndustryName(); ok {
		_spec.SetField(appinfo.FieldUseIndustryName, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AppKey(); ok {
		_spec.SetField(appinfo.FieldAppKey, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AppSecret(); ok {
		_spec.SetField(appinfo.FieldAppSecret, field.TypeString, value)
	}
	if aiuo.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedAppSdkIDs(); len(nodes) > 0 && !aiuo.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppSdkTable,
			Columns: []string{appinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppInfo{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
