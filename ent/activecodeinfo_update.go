// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/activecodeinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
)

// ActiveCodeInfoUpdate is the builder for updating ActiveCodeInfo entities.
type ActiveCodeInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ActiveCodeInfoMutation
}

// Where appends a list predicates to the ActiveCodeInfoUpdate builder.
func (aciu *ActiveCodeInfoUpdate) Where(ps ...predicate.ActiveCodeInfo) *ActiveCodeInfoUpdate {
	aciu.mutation.Where(ps...)
	return aciu
}

// SetUpdatedAt sets the "updated_at" field.
func (aciu *ActiveCodeInfoUpdate) SetUpdatedAt(t time.Time) *ActiveCodeInfoUpdate {
	aciu.mutation.SetUpdatedAt(t)
	return aciu
}

// SetStatus sets the "status" field.
func (aciu *ActiveCodeInfoUpdate) SetStatus(u uint8) *ActiveCodeInfoUpdate {
	aciu.mutation.ResetStatus()
	aciu.mutation.SetStatus(u)
	return aciu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableStatus(u *uint8) *ActiveCodeInfoUpdate {
	if u != nil {
		aciu.SetStatus(*u)
	}
	return aciu
}

// AddStatus adds u to the "status" field.
func (aciu *ActiveCodeInfoUpdate) AddStatus(u int8) *ActiveCodeInfoUpdate {
	aciu.mutation.AddStatus(u)
	return aciu
}

// ClearStatus clears the value of the "status" field.
func (aciu *ActiveCodeInfoUpdate) ClearStatus() *ActiveCodeInfoUpdate {
	aciu.mutation.ClearStatus()
	return aciu
}

// SetActiveKey sets the "active_key" field.
func (aciu *ActiveCodeInfoUpdate) SetActiveKey(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetActiveKey(s)
	return aciu
}

// SetNillableActiveKey sets the "active_key" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableActiveKey(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetActiveKey(*s)
	}
	return aciu
}

// SetUserID sets the "user_id" field.
func (aciu *ActiveCodeInfoUpdate) SetUserID(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetUserID(s)
	return aciu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableUserID(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetUserID(*s)
	}
	return aciu
}

// SetAppID sets the "app_id" field.
func (aciu *ActiveCodeInfoUpdate) SetAppID(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetAppID(s)
	return aciu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableAppID(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetAppID(*s)
	}
	return aciu
}

// SetActiveIP sets the "active_ip" field.
func (aciu *ActiveCodeInfoUpdate) SetActiveIP(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetActiveIP(s)
	return aciu
}

// SetNillableActiveIP sets the "active_ip" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableActiveIP(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetActiveIP(*s)
	}
	return aciu
}

// SetDeviceSn sets the "device_sn" field.
func (aciu *ActiveCodeInfoUpdate) SetDeviceSn(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetDeviceSn(s)
	return aciu
}

// SetNillableDeviceSn sets the "device_sn" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableDeviceSn(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetDeviceSn(*s)
	}
	return aciu
}

// SetDeviceMAC sets the "device_mac" field.
func (aciu *ActiveCodeInfoUpdate) SetDeviceMAC(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetDeviceMAC(s)
	return aciu
}

// SetNillableDeviceMAC sets the "device_mac" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableDeviceMAC(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetDeviceMAC(*s)
	}
	return aciu
}

// SetDeviceIdentity sets the "device_identity" field.
func (aciu *ActiveCodeInfoUpdate) SetDeviceIdentity(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetDeviceIdentity(s)
	return aciu
}

// SetNillableDeviceIdentity sets the "device_identity" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableDeviceIdentity(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetDeviceIdentity(*s)
	}
	return aciu
}

// SetActiveDate sets the "active_date" field.
func (aciu *ActiveCodeInfoUpdate) SetActiveDate(t time.Time) *ActiveCodeInfoUpdate {
	aciu.mutation.SetActiveDate(t)
	return aciu
}

// SetNillableActiveDate sets the "active_date" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableActiveDate(t *time.Time) *ActiveCodeInfoUpdate {
	if t != nil {
		aciu.SetActiveDate(*t)
	}
	return aciu
}

// SetActiveType sets the "active_type" field.
func (aciu *ActiveCodeInfoUpdate) SetActiveType(i int64) *ActiveCodeInfoUpdate {
	aciu.mutation.ResetActiveType()
	aciu.mutation.SetActiveType(i)
	return aciu
}

// SetNillableActiveType sets the "active_type" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableActiveType(i *int64) *ActiveCodeInfoUpdate {
	if i != nil {
		aciu.SetActiveType(*i)
	}
	return aciu
}

// AddActiveType adds i to the "active_type" field.
func (aciu *ActiveCodeInfoUpdate) AddActiveType(i int64) *ActiveCodeInfoUpdate {
	aciu.mutation.AddActiveType(i)
	return aciu
}

// SetActiveFile sets the "active_file" field.
func (aciu *ActiveCodeInfoUpdate) SetActiveFile(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetActiveFile(s)
	return aciu
}

// SetNillableActiveFile sets the "active_file" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableActiveFile(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetActiveFile(*s)
	}
	return aciu
}

// SetVersion sets the "version" field.
func (aciu *ActiveCodeInfoUpdate) SetVersion(s string) *ActiveCodeInfoUpdate {
	aciu.mutation.SetVersion(s)
	return aciu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableVersion(s *string) *ActiveCodeInfoUpdate {
	if s != nil {
		aciu.SetVersion(*s)
	}
	return aciu
}

// SetStartDate sets the "start_date" field.
func (aciu *ActiveCodeInfoUpdate) SetStartDate(t time.Time) *ActiveCodeInfoUpdate {
	aciu.mutation.SetStartDate(t)
	return aciu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableStartDate(t *time.Time) *ActiveCodeInfoUpdate {
	if t != nil {
		aciu.SetStartDate(*t)
	}
	return aciu
}

// SetExpireDate sets the "expire_date" field.
func (aciu *ActiveCodeInfoUpdate) SetExpireDate(t time.Time) *ActiveCodeInfoUpdate {
	aciu.mutation.SetExpireDate(t)
	return aciu
}

// SetNillableExpireDate sets the "expire_date" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableExpireDate(t *time.Time) *ActiveCodeInfoUpdate {
	if t != nil {
		aciu.SetExpireDate(*t)
	}
	return aciu
}

// SetAppSkdID sets the "app_skd_id" field.
func (aciu *ActiveCodeInfoUpdate) SetAppSkdID(u uuid.UUID) *ActiveCodeInfoUpdate {
	aciu.mutation.SetAppSkdID(u)
	return aciu
}

// SetNillableAppSkdID sets the "app_skd_id" field if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableAppSkdID(u *uuid.UUID) *ActiveCodeInfoUpdate {
	if u != nil {
		aciu.SetAppSkdID(*u)
	}
	return aciu
}

// ClearAppSkdID clears the value of the "app_skd_id" field.
func (aciu *ActiveCodeInfoUpdate) ClearAppSkdID() *ActiveCodeInfoUpdate {
	aciu.mutation.ClearAppSkdID()
	return aciu
}

// SetAppSdkID sets the "app_sdk" edge to the AppSdk entity by ID.
func (aciu *ActiveCodeInfoUpdate) SetAppSdkID(id uuid.UUID) *ActiveCodeInfoUpdate {
	aciu.mutation.SetAppSdkID(id)
	return aciu
}

// SetNillableAppSdkID sets the "app_sdk" edge to the AppSdk entity by ID if the given value is not nil.
func (aciu *ActiveCodeInfoUpdate) SetNillableAppSdkID(id *uuid.UUID) *ActiveCodeInfoUpdate {
	if id != nil {
		aciu = aciu.SetAppSdkID(*id)
	}
	return aciu
}

// SetAppSdk sets the "app_sdk" edge to the AppSdk entity.
func (aciu *ActiveCodeInfoUpdate) SetAppSdk(a *AppSdk) *ActiveCodeInfoUpdate {
	return aciu.SetAppSdkID(a.ID)
}

// Mutation returns the ActiveCodeInfoMutation object of the builder.
func (aciu *ActiveCodeInfoUpdate) Mutation() *ActiveCodeInfoMutation {
	return aciu.mutation
}

// ClearAppSdk clears the "app_sdk" edge to the AppSdk entity.
func (aciu *ActiveCodeInfoUpdate) ClearAppSdk() *ActiveCodeInfoUpdate {
	aciu.mutation.ClearAppSdk()
	return aciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aciu *ActiveCodeInfoUpdate) Save(ctx context.Context) (int, error) {
	aciu.defaults()
	return withHooks(ctx, aciu.sqlSave, aciu.mutation, aciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aciu *ActiveCodeInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := aciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aciu *ActiveCodeInfoUpdate) Exec(ctx context.Context) error {
	_, err := aciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aciu *ActiveCodeInfoUpdate) ExecX(ctx context.Context) {
	if err := aciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aciu *ActiveCodeInfoUpdate) defaults() {
	if _, ok := aciu.mutation.UpdatedAt(); !ok {
		v := activecodeinfo.UpdateDefaultUpdatedAt()
		aciu.mutation.SetUpdatedAt(v)
	}
}

func (aciu *ActiveCodeInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(activecodeinfo.Table, activecodeinfo.Columns, sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID))
	if ps := aciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aciu.mutation.UpdatedAt(); ok {
		_spec.SetField(activecodeinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aciu.mutation.Status(); ok {
		_spec.SetField(activecodeinfo.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := aciu.mutation.AddedStatus(); ok {
		_spec.AddField(activecodeinfo.FieldStatus, field.TypeUint8, value)
	}
	if aciu.mutation.StatusCleared() {
		_spec.ClearField(activecodeinfo.FieldStatus, field.TypeUint8)
	}
	if value, ok := aciu.mutation.ActiveKey(); ok {
		_spec.SetField(activecodeinfo.FieldActiveKey, field.TypeString, value)
	}
	if value, ok := aciu.mutation.UserID(); ok {
		_spec.SetField(activecodeinfo.FieldUserID, field.TypeString, value)
	}
	if value, ok := aciu.mutation.AppID(); ok {
		_spec.SetField(activecodeinfo.FieldAppID, field.TypeString, value)
	}
	if value, ok := aciu.mutation.ActiveIP(); ok {
		_spec.SetField(activecodeinfo.FieldActiveIP, field.TypeString, value)
	}
	if value, ok := aciu.mutation.DeviceSn(); ok {
		_spec.SetField(activecodeinfo.FieldDeviceSn, field.TypeString, value)
	}
	if value, ok := aciu.mutation.DeviceMAC(); ok {
		_spec.SetField(activecodeinfo.FieldDeviceMAC, field.TypeString, value)
	}
	if value, ok := aciu.mutation.DeviceIdentity(); ok {
		_spec.SetField(activecodeinfo.FieldDeviceIdentity, field.TypeString, value)
	}
	if value, ok := aciu.mutation.ActiveDate(); ok {
		_spec.SetField(activecodeinfo.FieldActiveDate, field.TypeTime, value)
	}
	if value, ok := aciu.mutation.ActiveType(); ok {
		_spec.SetField(activecodeinfo.FieldActiveType, field.TypeInt64, value)
	}
	if value, ok := aciu.mutation.AddedActiveType(); ok {
		_spec.AddField(activecodeinfo.FieldActiveType, field.TypeInt64, value)
	}
	if value, ok := aciu.mutation.ActiveFile(); ok {
		_spec.SetField(activecodeinfo.FieldActiveFile, field.TypeString, value)
	}
	if value, ok := aciu.mutation.Version(); ok {
		_spec.SetField(activecodeinfo.FieldVersion, field.TypeString, value)
	}
	if value, ok := aciu.mutation.StartDate(); ok {
		_spec.SetField(activecodeinfo.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := aciu.mutation.ExpireDate(); ok {
		_spec.SetField(activecodeinfo.FieldExpireDate, field.TypeTime, value)
	}
	if aciu.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activecodeinfo.AppSdkTable,
			Columns: []string{activecodeinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aciu.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activecodeinfo.AppSdkTable,
			Columns: []string{activecodeinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activecodeinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aciu.mutation.done = true
	return n, nil
}

// ActiveCodeInfoUpdateOne is the builder for updating a single ActiveCodeInfo entity.
type ActiveCodeInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActiveCodeInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetUpdatedAt(t time.Time) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetUpdatedAt(t)
	return aciuo
}

// SetStatus sets the "status" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetStatus(u uint8) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.ResetStatus()
	aciuo.mutation.SetStatus(u)
	return aciuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableStatus(u *uint8) *ActiveCodeInfoUpdateOne {
	if u != nil {
		aciuo.SetStatus(*u)
	}
	return aciuo
}

// AddStatus adds u to the "status" field.
func (aciuo *ActiveCodeInfoUpdateOne) AddStatus(u int8) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.AddStatus(u)
	return aciuo
}

// ClearStatus clears the value of the "status" field.
func (aciuo *ActiveCodeInfoUpdateOne) ClearStatus() *ActiveCodeInfoUpdateOne {
	aciuo.mutation.ClearStatus()
	return aciuo
}

// SetActiveKey sets the "active_key" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetActiveKey(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetActiveKey(s)
	return aciuo
}

// SetNillableActiveKey sets the "active_key" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableActiveKey(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetActiveKey(*s)
	}
	return aciuo
}

// SetUserID sets the "user_id" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetUserID(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetUserID(s)
	return aciuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableUserID(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetUserID(*s)
	}
	return aciuo
}

// SetAppID sets the "app_id" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetAppID(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetAppID(s)
	return aciuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableAppID(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetAppID(*s)
	}
	return aciuo
}

// SetActiveIP sets the "active_ip" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetActiveIP(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetActiveIP(s)
	return aciuo
}

// SetNillableActiveIP sets the "active_ip" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableActiveIP(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetActiveIP(*s)
	}
	return aciuo
}

// SetDeviceSn sets the "device_sn" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetDeviceSn(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetDeviceSn(s)
	return aciuo
}

// SetNillableDeviceSn sets the "device_sn" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableDeviceSn(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetDeviceSn(*s)
	}
	return aciuo
}

// SetDeviceMAC sets the "device_mac" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetDeviceMAC(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetDeviceMAC(s)
	return aciuo
}

// SetNillableDeviceMAC sets the "device_mac" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableDeviceMAC(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetDeviceMAC(*s)
	}
	return aciuo
}

// SetDeviceIdentity sets the "device_identity" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetDeviceIdentity(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetDeviceIdentity(s)
	return aciuo
}

// SetNillableDeviceIdentity sets the "device_identity" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableDeviceIdentity(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetDeviceIdentity(*s)
	}
	return aciuo
}

// SetActiveDate sets the "active_date" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetActiveDate(t time.Time) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetActiveDate(t)
	return aciuo
}

// SetNillableActiveDate sets the "active_date" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableActiveDate(t *time.Time) *ActiveCodeInfoUpdateOne {
	if t != nil {
		aciuo.SetActiveDate(*t)
	}
	return aciuo
}

// SetActiveType sets the "active_type" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetActiveType(i int64) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.ResetActiveType()
	aciuo.mutation.SetActiveType(i)
	return aciuo
}

// SetNillableActiveType sets the "active_type" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableActiveType(i *int64) *ActiveCodeInfoUpdateOne {
	if i != nil {
		aciuo.SetActiveType(*i)
	}
	return aciuo
}

// AddActiveType adds i to the "active_type" field.
func (aciuo *ActiveCodeInfoUpdateOne) AddActiveType(i int64) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.AddActiveType(i)
	return aciuo
}

// SetActiveFile sets the "active_file" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetActiveFile(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetActiveFile(s)
	return aciuo
}

// SetNillableActiveFile sets the "active_file" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableActiveFile(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetActiveFile(*s)
	}
	return aciuo
}

// SetVersion sets the "version" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetVersion(s string) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetVersion(s)
	return aciuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableVersion(s *string) *ActiveCodeInfoUpdateOne {
	if s != nil {
		aciuo.SetVersion(*s)
	}
	return aciuo
}

// SetStartDate sets the "start_date" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetStartDate(t time.Time) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetStartDate(t)
	return aciuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableStartDate(t *time.Time) *ActiveCodeInfoUpdateOne {
	if t != nil {
		aciuo.SetStartDate(*t)
	}
	return aciuo
}

// SetExpireDate sets the "expire_date" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetExpireDate(t time.Time) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetExpireDate(t)
	return aciuo
}

// SetNillableExpireDate sets the "expire_date" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableExpireDate(t *time.Time) *ActiveCodeInfoUpdateOne {
	if t != nil {
		aciuo.SetExpireDate(*t)
	}
	return aciuo
}

// SetAppSkdID sets the "app_skd_id" field.
func (aciuo *ActiveCodeInfoUpdateOne) SetAppSkdID(u uuid.UUID) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetAppSkdID(u)
	return aciuo
}

// SetNillableAppSkdID sets the "app_skd_id" field if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableAppSkdID(u *uuid.UUID) *ActiveCodeInfoUpdateOne {
	if u != nil {
		aciuo.SetAppSkdID(*u)
	}
	return aciuo
}

// ClearAppSkdID clears the value of the "app_skd_id" field.
func (aciuo *ActiveCodeInfoUpdateOne) ClearAppSkdID() *ActiveCodeInfoUpdateOne {
	aciuo.mutation.ClearAppSkdID()
	return aciuo
}

// SetAppSdkID sets the "app_sdk" edge to the AppSdk entity by ID.
func (aciuo *ActiveCodeInfoUpdateOne) SetAppSdkID(id uuid.UUID) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.SetAppSdkID(id)
	return aciuo
}

// SetNillableAppSdkID sets the "app_sdk" edge to the AppSdk entity by ID if the given value is not nil.
func (aciuo *ActiveCodeInfoUpdateOne) SetNillableAppSdkID(id *uuid.UUID) *ActiveCodeInfoUpdateOne {
	if id != nil {
		aciuo = aciuo.SetAppSdkID(*id)
	}
	return aciuo
}

// SetAppSdk sets the "app_sdk" edge to the AppSdk entity.
func (aciuo *ActiveCodeInfoUpdateOne) SetAppSdk(a *AppSdk) *ActiveCodeInfoUpdateOne {
	return aciuo.SetAppSdkID(a.ID)
}

// Mutation returns the ActiveCodeInfoMutation object of the builder.
func (aciuo *ActiveCodeInfoUpdateOne) Mutation() *ActiveCodeInfoMutation {
	return aciuo.mutation
}

// ClearAppSdk clears the "app_sdk" edge to the AppSdk entity.
func (aciuo *ActiveCodeInfoUpdateOne) ClearAppSdk() *ActiveCodeInfoUpdateOne {
	aciuo.mutation.ClearAppSdk()
	return aciuo
}

// Where appends a list predicates to the ActiveCodeInfoUpdate builder.
func (aciuo *ActiveCodeInfoUpdateOne) Where(ps ...predicate.ActiveCodeInfo) *ActiveCodeInfoUpdateOne {
	aciuo.mutation.Where(ps...)
	return aciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aciuo *ActiveCodeInfoUpdateOne) Select(field string, fields ...string) *ActiveCodeInfoUpdateOne {
	aciuo.fields = append([]string{field}, fields...)
	return aciuo
}

// Save executes the query and returns the updated ActiveCodeInfo entity.
func (aciuo *ActiveCodeInfoUpdateOne) Save(ctx context.Context) (*ActiveCodeInfo, error) {
	aciuo.defaults()
	return withHooks(ctx, aciuo.sqlSave, aciuo.mutation, aciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aciuo *ActiveCodeInfoUpdateOne) SaveX(ctx context.Context) *ActiveCodeInfo {
	node, err := aciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aciuo *ActiveCodeInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := aciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aciuo *ActiveCodeInfoUpdateOne) ExecX(ctx context.Context) {
	if err := aciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aciuo *ActiveCodeInfoUpdateOne) defaults() {
	if _, ok := aciuo.mutation.UpdatedAt(); !ok {
		v := activecodeinfo.UpdateDefaultUpdatedAt()
		aciuo.mutation.SetUpdatedAt(v)
	}
}

func (aciuo *ActiveCodeInfoUpdateOne) sqlSave(ctx context.Context) (_node *ActiveCodeInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(activecodeinfo.Table, activecodeinfo.Columns, sqlgraph.NewFieldSpec(activecodeinfo.FieldID, field.TypeUUID))
	id, ok := aciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActiveCodeInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activecodeinfo.FieldID)
		for _, f := range fields {
			if !activecodeinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activecodeinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(activecodeinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aciuo.mutation.Status(); ok {
		_spec.SetField(activecodeinfo.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := aciuo.mutation.AddedStatus(); ok {
		_spec.AddField(activecodeinfo.FieldStatus, field.TypeUint8, value)
	}
	if aciuo.mutation.StatusCleared() {
		_spec.ClearField(activecodeinfo.FieldStatus, field.TypeUint8)
	}
	if value, ok := aciuo.mutation.ActiveKey(); ok {
		_spec.SetField(activecodeinfo.FieldActiveKey, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.UserID(); ok {
		_spec.SetField(activecodeinfo.FieldUserID, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.AppID(); ok {
		_spec.SetField(activecodeinfo.FieldAppID, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.ActiveIP(); ok {
		_spec.SetField(activecodeinfo.FieldActiveIP, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.DeviceSn(); ok {
		_spec.SetField(activecodeinfo.FieldDeviceSn, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.DeviceMAC(); ok {
		_spec.SetField(activecodeinfo.FieldDeviceMAC, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.DeviceIdentity(); ok {
		_spec.SetField(activecodeinfo.FieldDeviceIdentity, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.ActiveDate(); ok {
		_spec.SetField(activecodeinfo.FieldActiveDate, field.TypeTime, value)
	}
	if value, ok := aciuo.mutation.ActiveType(); ok {
		_spec.SetField(activecodeinfo.FieldActiveType, field.TypeInt64, value)
	}
	if value, ok := aciuo.mutation.AddedActiveType(); ok {
		_spec.AddField(activecodeinfo.FieldActiveType, field.TypeInt64, value)
	}
	if value, ok := aciuo.mutation.ActiveFile(); ok {
		_spec.SetField(activecodeinfo.FieldActiveFile, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.Version(); ok {
		_spec.SetField(activecodeinfo.FieldVersion, field.TypeString, value)
	}
	if value, ok := aciuo.mutation.StartDate(); ok {
		_spec.SetField(activecodeinfo.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := aciuo.mutation.ExpireDate(); ok {
		_spec.SetField(activecodeinfo.FieldExpireDate, field.TypeTime, value)
	}
	if aciuo.mutation.AppSdkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activecodeinfo.AppSdkTable,
			Columns: []string{activecodeinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aciuo.mutation.AppSdkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activecodeinfo.AppSdkTable,
			Columns: []string{activecodeinfo.AppSdkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appsdk.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActiveCodeInfo{config: aciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activecodeinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aciuo.mutation.done = true
	return _node, nil
}
