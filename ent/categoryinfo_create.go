// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/openned8-rpc/ent/categoryinfo"
)

// CategoryInfoCreate is the builder for creating a CategoryInfo entity.
type CategoryInfoCreate struct {
	config
	mutation *CategoryInfoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cic *CategoryInfoCreate) SetCreatedAt(t time.Time) *CategoryInfoCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CategoryInfoCreate) SetNillableCreatedAt(t *time.Time) *CategoryInfoCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *CategoryInfoCreate) SetUpdatedAt(t time.Time) *CategoryInfoCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *CategoryInfoCreate) SetNillableUpdatedAt(t *time.Time) *CategoryInfoCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetName sets the "name" field.
func (cic *CategoryInfoCreate) SetName(s string) *CategoryInfoCreate {
	cic.mutation.SetName(s)
	return cic
}

// SetID sets the "id" field.
func (cic *CategoryInfoCreate) SetID(u uint64) *CategoryInfoCreate {
	cic.mutation.SetID(u)
	return cic
}

// Mutation returns the CategoryInfoMutation object of the builder.
func (cic *CategoryInfoCreate) Mutation() *CategoryInfoMutation {
	return cic.mutation
}

// Save creates the CategoryInfo in the database.
func (cic *CategoryInfoCreate) Save(ctx context.Context) (*CategoryInfo, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CategoryInfoCreate) SaveX(ctx context.Context) *CategoryInfo {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CategoryInfoCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CategoryInfoCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CategoryInfoCreate) defaults() {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := categoryinfo.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		v := categoryinfo.DefaultUpdatedAt()
		cic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CategoryInfoCreate) check() error {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CategoryInfo.created_at"`)}
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CategoryInfo.updated_at"`)}
	}
	if _, ok := cic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CategoryInfo.name"`)}
	}
	return nil
}

func (cic *CategoryInfoCreate) sqlSave(ctx context.Context) (*CategoryInfo, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *CategoryInfoCreate) createSpec() (*CategoryInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &CategoryInfo{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(categoryinfo.Table, sqlgraph.NewFieldSpec(categoryinfo.FieldID, field.TypeUint64))
	)
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(categoryinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.SetField(categoryinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.Name(); ok {
		_spec.SetField(categoryinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// CategoryInfoCreateBulk is the builder for creating many CategoryInfo entities in bulk.
type CategoryInfoCreateBulk struct {
	config
	err      error
	builders []*CategoryInfoCreate
}

// Save creates the CategoryInfo entities in the database.
func (cicb *CategoryInfoCreateBulk) Save(ctx context.Context) ([]*CategoryInfo, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CategoryInfo, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CategoryInfoCreateBulk) SaveX(ctx context.Context) []*CategoryInfo {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CategoryInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CategoryInfoCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
