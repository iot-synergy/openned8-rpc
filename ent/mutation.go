// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/iot-synergy/openned8-rpc/ent/activecodeinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appinfo"
	"github.com/iot-synergy/openned8-rpc/ent/appsdk"
	"github.com/iot-synergy/openned8-rpc/ent/categoryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/industryinfo"
	"github.com/iot-synergy/openned8-rpc/ent/predicate"
	"github.com/iot-synergy/openned8-rpc/ent/sdkinfo"
	"github.com/iot-synergy/openned8-rpc/ent/sdkusage"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActiveCodeInfo = "ActiveCodeInfo"
	TypeAppInfo        = "AppInfo"
	TypeAppSdk         = "AppSdk"
	TypeCategoryInfo   = "CategoryInfo"
	TypeIndustryInfo   = "IndustryInfo"
	TypeSdkInfo        = "SdkInfo"
	TypeSdkUsage       = "SdkUsage"
)

// ActiveCodeInfoMutation represents an operation that mutates the ActiveCodeInfo nodes in the graph.
type ActiveCodeInfoMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	status          *uint8
	addstatus       *int8
	active_key      *string
	user_id         *string
	app_id          *string
	active_ip       *string
	device_sn       *string
	device_mac      *string
	device_identity *string
	active_date     *time.Time
	active_type     *int64
	addactive_type  *int64
	active_file     *string
	version         *string
	start_date      *time.Time
	expire_date     *time.Time
	imei            *string
	clearedFields   map[string]struct{}
	app_sdk         *uuid.UUID
	clearedapp_sdk  bool
	done            bool
	oldValue        func(context.Context) (*ActiveCodeInfo, error)
	predicates      []predicate.ActiveCodeInfo
}

var _ ent.Mutation = (*ActiveCodeInfoMutation)(nil)

// activecodeinfoOption allows management of the mutation configuration using functional options.
type activecodeinfoOption func(*ActiveCodeInfoMutation)

// newActiveCodeInfoMutation creates new mutation for the ActiveCodeInfo entity.
func newActiveCodeInfoMutation(c config, op Op, opts ...activecodeinfoOption) *ActiveCodeInfoMutation {
	m := &ActiveCodeInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeActiveCodeInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActiveCodeInfoID sets the ID field of the mutation.
func withActiveCodeInfoID(id uuid.UUID) activecodeinfoOption {
	return func(m *ActiveCodeInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *ActiveCodeInfo
		)
		m.oldValue = func(ctx context.Context) (*ActiveCodeInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActiveCodeInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActiveCodeInfo sets the old ActiveCodeInfo of the mutation.
func withActiveCodeInfo(node *ActiveCodeInfo) activecodeinfoOption {
	return func(m *ActiveCodeInfoMutation) {
		m.oldValue = func(context.Context) (*ActiveCodeInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActiveCodeInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActiveCodeInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ActiveCodeInfo entities.
func (m *ActiveCodeInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActiveCodeInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActiveCodeInfoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ActiveCodeInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ActiveCodeInfoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActiveCodeInfoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActiveCodeInfoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ActiveCodeInfoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ActiveCodeInfoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ActiveCodeInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *ActiveCodeInfoMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ActiveCodeInfoMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ActiveCodeInfoMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ActiveCodeInfoMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *ActiveCodeInfoMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[activecodeinfo.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *ActiveCodeInfoMutation) StatusCleared() bool {
	_, ok := m.clearedFields[activecodeinfo.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *ActiveCodeInfoMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, activecodeinfo.FieldStatus)
}

// SetActiveKey sets the "active_key" field.
func (m *ActiveCodeInfoMutation) SetActiveKey(s string) {
	m.active_key = &s
}

// ActiveKey returns the value of the "active_key" field in the mutation.
func (m *ActiveCodeInfoMutation) ActiveKey() (r string, exists bool) {
	v := m.active_key
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveKey returns the old "active_key" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldActiveKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveKey: %w", err)
	}
	return oldValue.ActiveKey, nil
}

// ResetActiveKey resets all changes to the "active_key" field.
func (m *ActiveCodeInfoMutation) ResetActiveKey() {
	m.active_key = nil
}

// SetUserID sets the "user_id" field.
func (m *ActiveCodeInfoMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ActiveCodeInfoMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ActiveCodeInfoMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppID sets the "app_id" field.
func (m *ActiveCodeInfoMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ActiveCodeInfoMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ActiveCodeInfoMutation) ResetAppID() {
	m.app_id = nil
}

// SetActiveIP sets the "active_ip" field.
func (m *ActiveCodeInfoMutation) SetActiveIP(s string) {
	m.active_ip = &s
}

// ActiveIP returns the value of the "active_ip" field in the mutation.
func (m *ActiveCodeInfoMutation) ActiveIP() (r string, exists bool) {
	v := m.active_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveIP returns the old "active_ip" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldActiveIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveIP: %w", err)
	}
	return oldValue.ActiveIP, nil
}

// ResetActiveIP resets all changes to the "active_ip" field.
func (m *ActiveCodeInfoMutation) ResetActiveIP() {
	m.active_ip = nil
}

// SetDeviceSn sets the "device_sn" field.
func (m *ActiveCodeInfoMutation) SetDeviceSn(s string) {
	m.device_sn = &s
}

// DeviceSn returns the value of the "device_sn" field in the mutation.
func (m *ActiveCodeInfoMutation) DeviceSn() (r string, exists bool) {
	v := m.device_sn
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceSn returns the old "device_sn" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldDeviceSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceSn: %w", err)
	}
	return oldValue.DeviceSn, nil
}

// ResetDeviceSn resets all changes to the "device_sn" field.
func (m *ActiveCodeInfoMutation) ResetDeviceSn() {
	m.device_sn = nil
}

// SetDeviceMAC sets the "device_mac" field.
func (m *ActiveCodeInfoMutation) SetDeviceMAC(s string) {
	m.device_mac = &s
}

// DeviceMAC returns the value of the "device_mac" field in the mutation.
func (m *ActiveCodeInfoMutation) DeviceMAC() (r string, exists bool) {
	v := m.device_mac
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceMAC returns the old "device_mac" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldDeviceMAC(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceMAC is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceMAC requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceMAC: %w", err)
	}
	return oldValue.DeviceMAC, nil
}

// ResetDeviceMAC resets all changes to the "device_mac" field.
func (m *ActiveCodeInfoMutation) ResetDeviceMAC() {
	m.device_mac = nil
}

// SetDeviceIdentity sets the "device_identity" field.
func (m *ActiveCodeInfoMutation) SetDeviceIdentity(s string) {
	m.device_identity = &s
}

// DeviceIdentity returns the value of the "device_identity" field in the mutation.
func (m *ActiveCodeInfoMutation) DeviceIdentity() (r string, exists bool) {
	v := m.device_identity
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceIdentity returns the old "device_identity" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldDeviceIdentity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceIdentity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceIdentity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceIdentity: %w", err)
	}
	return oldValue.DeviceIdentity, nil
}

// ResetDeviceIdentity resets all changes to the "device_identity" field.
func (m *ActiveCodeInfoMutation) ResetDeviceIdentity() {
	m.device_identity = nil
}

// SetActiveDate sets the "active_date" field.
func (m *ActiveCodeInfoMutation) SetActiveDate(t time.Time) {
	m.active_date = &t
}

// ActiveDate returns the value of the "active_date" field in the mutation.
func (m *ActiveCodeInfoMutation) ActiveDate() (r time.Time, exists bool) {
	v := m.active_date
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveDate returns the old "active_date" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldActiveDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveDate: %w", err)
	}
	return oldValue.ActiveDate, nil
}

// ResetActiveDate resets all changes to the "active_date" field.
func (m *ActiveCodeInfoMutation) ResetActiveDate() {
	m.active_date = nil
}

// SetActiveType sets the "active_type" field.
func (m *ActiveCodeInfoMutation) SetActiveType(i int64) {
	m.active_type = &i
	m.addactive_type = nil
}

// ActiveType returns the value of the "active_type" field in the mutation.
func (m *ActiveCodeInfoMutation) ActiveType() (r int64, exists bool) {
	v := m.active_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveType returns the old "active_type" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldActiveType(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveType: %w", err)
	}
	return oldValue.ActiveType, nil
}

// AddActiveType adds i to the "active_type" field.
func (m *ActiveCodeInfoMutation) AddActiveType(i int64) {
	if m.addactive_type != nil {
		*m.addactive_type += i
	} else {
		m.addactive_type = &i
	}
}

// AddedActiveType returns the value that was added to the "active_type" field in this mutation.
func (m *ActiveCodeInfoMutation) AddedActiveType() (r int64, exists bool) {
	v := m.addactive_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetActiveType resets all changes to the "active_type" field.
func (m *ActiveCodeInfoMutation) ResetActiveType() {
	m.active_type = nil
	m.addactive_type = nil
}

// SetActiveFile sets the "active_file" field.
func (m *ActiveCodeInfoMutation) SetActiveFile(s string) {
	m.active_file = &s
}

// ActiveFile returns the value of the "active_file" field in the mutation.
func (m *ActiveCodeInfoMutation) ActiveFile() (r string, exists bool) {
	v := m.active_file
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveFile returns the old "active_file" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldActiveFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveFile: %w", err)
	}
	return oldValue.ActiveFile, nil
}

// ResetActiveFile resets all changes to the "active_file" field.
func (m *ActiveCodeInfoMutation) ResetActiveFile() {
	m.active_file = nil
}

// SetVersion sets the "version" field.
func (m *ActiveCodeInfoMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *ActiveCodeInfoMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *ActiveCodeInfoMutation) ResetVersion() {
	m.version = nil
}

// SetStartDate sets the "start_date" field.
func (m *ActiveCodeInfoMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *ActiveCodeInfoMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *ActiveCodeInfoMutation) ResetStartDate() {
	m.start_date = nil
}

// SetExpireDate sets the "expire_date" field.
func (m *ActiveCodeInfoMutation) SetExpireDate(t time.Time) {
	m.expire_date = &t
}

// ExpireDate returns the value of the "expire_date" field in the mutation.
func (m *ActiveCodeInfoMutation) ExpireDate() (r time.Time, exists bool) {
	v := m.expire_date
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireDate returns the old "expire_date" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldExpireDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireDate: %w", err)
	}
	return oldValue.ExpireDate, nil
}

// ResetExpireDate resets all changes to the "expire_date" field.
func (m *ActiveCodeInfoMutation) ResetExpireDate() {
	m.expire_date = nil
}

// SetAppSdkID sets the "app_sdk_id" field.
func (m *ActiveCodeInfoMutation) SetAppSdkID(u uuid.UUID) {
	m.app_sdk = &u
}

// AppSdkID returns the value of the "app_sdk_id" field in the mutation.
func (m *ActiveCodeInfoMutation) AppSdkID() (r uuid.UUID, exists bool) {
	v := m.app_sdk
	if v == nil {
		return
	}
	return *v, true
}

// OldAppSdkID returns the old "app_sdk_id" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldAppSdkID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppSdkID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppSdkID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppSdkID: %w", err)
	}
	return oldValue.AppSdkID, nil
}

// ClearAppSdkID clears the value of the "app_sdk_id" field.
func (m *ActiveCodeInfoMutation) ClearAppSdkID() {
	m.app_sdk = nil
	m.clearedFields[activecodeinfo.FieldAppSdkID] = struct{}{}
}

// AppSdkIDCleared returns if the "app_sdk_id" field was cleared in this mutation.
func (m *ActiveCodeInfoMutation) AppSdkIDCleared() bool {
	_, ok := m.clearedFields[activecodeinfo.FieldAppSdkID]
	return ok
}

// ResetAppSdkID resets all changes to the "app_sdk_id" field.
func (m *ActiveCodeInfoMutation) ResetAppSdkID() {
	m.app_sdk = nil
	delete(m.clearedFields, activecodeinfo.FieldAppSdkID)
}

// SetImei sets the "imei" field.
func (m *ActiveCodeInfoMutation) SetImei(s string) {
	m.imei = &s
}

// Imei returns the value of the "imei" field in the mutation.
func (m *ActiveCodeInfoMutation) Imei() (r string, exists bool) {
	v := m.imei
	if v == nil {
		return
	}
	return *v, true
}

// OldImei returns the old "imei" field's value of the ActiveCodeInfo entity.
// If the ActiveCodeInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActiveCodeInfoMutation) OldImei(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImei is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImei requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImei: %w", err)
	}
	return oldValue.Imei, nil
}

// ClearImei clears the value of the "imei" field.
func (m *ActiveCodeInfoMutation) ClearImei() {
	m.imei = nil
	m.clearedFields[activecodeinfo.FieldImei] = struct{}{}
}

// ImeiCleared returns if the "imei" field was cleared in this mutation.
func (m *ActiveCodeInfoMutation) ImeiCleared() bool {
	_, ok := m.clearedFields[activecodeinfo.FieldImei]
	return ok
}

// ResetImei resets all changes to the "imei" field.
func (m *ActiveCodeInfoMutation) ResetImei() {
	m.imei = nil
	delete(m.clearedFields, activecodeinfo.FieldImei)
}

// ClearAppSdk clears the "app_sdk" edge to the AppSdk entity.
func (m *ActiveCodeInfoMutation) ClearAppSdk() {
	m.clearedapp_sdk = true
	m.clearedFields[activecodeinfo.FieldAppSdkID] = struct{}{}
}

// AppSdkCleared reports if the "app_sdk" edge to the AppSdk entity was cleared.
func (m *ActiveCodeInfoMutation) AppSdkCleared() bool {
	return m.AppSdkIDCleared() || m.clearedapp_sdk
}

// AppSdkIDs returns the "app_sdk" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AppSdkID instead. It exists only for internal usage by the builders.
func (m *ActiveCodeInfoMutation) AppSdkIDs() (ids []uuid.UUID) {
	if id := m.app_sdk; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAppSdk resets all changes to the "app_sdk" edge.
func (m *ActiveCodeInfoMutation) ResetAppSdk() {
	m.app_sdk = nil
	m.clearedapp_sdk = false
}

// Where appends a list predicates to the ActiveCodeInfoMutation builder.
func (m *ActiveCodeInfoMutation) Where(ps ...predicate.ActiveCodeInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActiveCodeInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActiveCodeInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ActiveCodeInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActiveCodeInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActiveCodeInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ActiveCodeInfo).
func (m *ActiveCodeInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActiveCodeInfoMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.created_at != nil {
		fields = append(fields, activecodeinfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, activecodeinfo.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, activecodeinfo.FieldStatus)
	}
	if m.active_key != nil {
		fields = append(fields, activecodeinfo.FieldActiveKey)
	}
	if m.user_id != nil {
		fields = append(fields, activecodeinfo.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, activecodeinfo.FieldAppID)
	}
	if m.active_ip != nil {
		fields = append(fields, activecodeinfo.FieldActiveIP)
	}
	if m.device_sn != nil {
		fields = append(fields, activecodeinfo.FieldDeviceSn)
	}
	if m.device_mac != nil {
		fields = append(fields, activecodeinfo.FieldDeviceMAC)
	}
	if m.device_identity != nil {
		fields = append(fields, activecodeinfo.FieldDeviceIdentity)
	}
	if m.active_date != nil {
		fields = append(fields, activecodeinfo.FieldActiveDate)
	}
	if m.active_type != nil {
		fields = append(fields, activecodeinfo.FieldActiveType)
	}
	if m.active_file != nil {
		fields = append(fields, activecodeinfo.FieldActiveFile)
	}
	if m.version != nil {
		fields = append(fields, activecodeinfo.FieldVersion)
	}
	if m.start_date != nil {
		fields = append(fields, activecodeinfo.FieldStartDate)
	}
	if m.expire_date != nil {
		fields = append(fields, activecodeinfo.FieldExpireDate)
	}
	if m.app_sdk != nil {
		fields = append(fields, activecodeinfo.FieldAppSdkID)
	}
	if m.imei != nil {
		fields = append(fields, activecodeinfo.FieldImei)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActiveCodeInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activecodeinfo.FieldCreatedAt:
		return m.CreatedAt()
	case activecodeinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case activecodeinfo.FieldStatus:
		return m.Status()
	case activecodeinfo.FieldActiveKey:
		return m.ActiveKey()
	case activecodeinfo.FieldUserID:
		return m.UserID()
	case activecodeinfo.FieldAppID:
		return m.AppID()
	case activecodeinfo.FieldActiveIP:
		return m.ActiveIP()
	case activecodeinfo.FieldDeviceSn:
		return m.DeviceSn()
	case activecodeinfo.FieldDeviceMAC:
		return m.DeviceMAC()
	case activecodeinfo.FieldDeviceIdentity:
		return m.DeviceIdentity()
	case activecodeinfo.FieldActiveDate:
		return m.ActiveDate()
	case activecodeinfo.FieldActiveType:
		return m.ActiveType()
	case activecodeinfo.FieldActiveFile:
		return m.ActiveFile()
	case activecodeinfo.FieldVersion:
		return m.Version()
	case activecodeinfo.FieldStartDate:
		return m.StartDate()
	case activecodeinfo.FieldExpireDate:
		return m.ExpireDate()
	case activecodeinfo.FieldAppSdkID:
		return m.AppSdkID()
	case activecodeinfo.FieldImei:
		return m.Imei()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActiveCodeInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activecodeinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case activecodeinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case activecodeinfo.FieldStatus:
		return m.OldStatus(ctx)
	case activecodeinfo.FieldActiveKey:
		return m.OldActiveKey(ctx)
	case activecodeinfo.FieldUserID:
		return m.OldUserID(ctx)
	case activecodeinfo.FieldAppID:
		return m.OldAppID(ctx)
	case activecodeinfo.FieldActiveIP:
		return m.OldActiveIP(ctx)
	case activecodeinfo.FieldDeviceSn:
		return m.OldDeviceSn(ctx)
	case activecodeinfo.FieldDeviceMAC:
		return m.OldDeviceMAC(ctx)
	case activecodeinfo.FieldDeviceIdentity:
		return m.OldDeviceIdentity(ctx)
	case activecodeinfo.FieldActiveDate:
		return m.OldActiveDate(ctx)
	case activecodeinfo.FieldActiveType:
		return m.OldActiveType(ctx)
	case activecodeinfo.FieldActiveFile:
		return m.OldActiveFile(ctx)
	case activecodeinfo.FieldVersion:
		return m.OldVersion(ctx)
	case activecodeinfo.FieldStartDate:
		return m.OldStartDate(ctx)
	case activecodeinfo.FieldExpireDate:
		return m.OldExpireDate(ctx)
	case activecodeinfo.FieldAppSdkID:
		return m.OldAppSdkID(ctx)
	case activecodeinfo.FieldImei:
		return m.OldImei(ctx)
	}
	return nil, fmt.Errorf("unknown ActiveCodeInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActiveCodeInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activecodeinfo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case activecodeinfo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case activecodeinfo.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case activecodeinfo.FieldActiveKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveKey(v)
		return nil
	case activecodeinfo.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case activecodeinfo.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case activecodeinfo.FieldActiveIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveIP(v)
		return nil
	case activecodeinfo.FieldDeviceSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceSn(v)
		return nil
	case activecodeinfo.FieldDeviceMAC:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceMAC(v)
		return nil
	case activecodeinfo.FieldDeviceIdentity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceIdentity(v)
		return nil
	case activecodeinfo.FieldActiveDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveDate(v)
		return nil
	case activecodeinfo.FieldActiveType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveType(v)
		return nil
	case activecodeinfo.FieldActiveFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveFile(v)
		return nil
	case activecodeinfo.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case activecodeinfo.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case activecodeinfo.FieldExpireDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireDate(v)
		return nil
	case activecodeinfo.FieldAppSdkID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppSdkID(v)
		return nil
	case activecodeinfo.FieldImei:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImei(v)
		return nil
	}
	return fmt.Errorf("unknown ActiveCodeInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActiveCodeInfoMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, activecodeinfo.FieldStatus)
	}
	if m.addactive_type != nil {
		fields = append(fields, activecodeinfo.FieldActiveType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActiveCodeInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case activecodeinfo.FieldStatus:
		return m.AddedStatus()
	case activecodeinfo.FieldActiveType:
		return m.AddedActiveType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActiveCodeInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case activecodeinfo.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case activecodeinfo.FieldActiveType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActiveType(v)
		return nil
	}
	return fmt.Errorf("unknown ActiveCodeInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActiveCodeInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(activecodeinfo.FieldStatus) {
		fields = append(fields, activecodeinfo.FieldStatus)
	}
	if m.FieldCleared(activecodeinfo.FieldAppSdkID) {
		fields = append(fields, activecodeinfo.FieldAppSdkID)
	}
	if m.FieldCleared(activecodeinfo.FieldImei) {
		fields = append(fields, activecodeinfo.FieldImei)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActiveCodeInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActiveCodeInfoMutation) ClearField(name string) error {
	switch name {
	case activecodeinfo.FieldStatus:
		m.ClearStatus()
		return nil
	case activecodeinfo.FieldAppSdkID:
		m.ClearAppSdkID()
		return nil
	case activecodeinfo.FieldImei:
		m.ClearImei()
		return nil
	}
	return fmt.Errorf("unknown ActiveCodeInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActiveCodeInfoMutation) ResetField(name string) error {
	switch name {
	case activecodeinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case activecodeinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case activecodeinfo.FieldStatus:
		m.ResetStatus()
		return nil
	case activecodeinfo.FieldActiveKey:
		m.ResetActiveKey()
		return nil
	case activecodeinfo.FieldUserID:
		m.ResetUserID()
		return nil
	case activecodeinfo.FieldAppID:
		m.ResetAppID()
		return nil
	case activecodeinfo.FieldActiveIP:
		m.ResetActiveIP()
		return nil
	case activecodeinfo.FieldDeviceSn:
		m.ResetDeviceSn()
		return nil
	case activecodeinfo.FieldDeviceMAC:
		m.ResetDeviceMAC()
		return nil
	case activecodeinfo.FieldDeviceIdentity:
		m.ResetDeviceIdentity()
		return nil
	case activecodeinfo.FieldActiveDate:
		m.ResetActiveDate()
		return nil
	case activecodeinfo.FieldActiveType:
		m.ResetActiveType()
		return nil
	case activecodeinfo.FieldActiveFile:
		m.ResetActiveFile()
		return nil
	case activecodeinfo.FieldVersion:
		m.ResetVersion()
		return nil
	case activecodeinfo.FieldStartDate:
		m.ResetStartDate()
		return nil
	case activecodeinfo.FieldExpireDate:
		m.ResetExpireDate()
		return nil
	case activecodeinfo.FieldAppSdkID:
		m.ResetAppSdkID()
		return nil
	case activecodeinfo.FieldImei:
		m.ResetImei()
		return nil
	}
	return fmt.Errorf("unknown ActiveCodeInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActiveCodeInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.app_sdk != nil {
		edges = append(edges, activecodeinfo.EdgeAppSdk)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActiveCodeInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case activecodeinfo.EdgeAppSdk:
		if id := m.app_sdk; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActiveCodeInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActiveCodeInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActiveCodeInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapp_sdk {
		edges = append(edges, activecodeinfo.EdgeAppSdk)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActiveCodeInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case activecodeinfo.EdgeAppSdk:
		return m.clearedapp_sdk
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActiveCodeInfoMutation) ClearEdge(name string) error {
	switch name {
	case activecodeinfo.EdgeAppSdk:
		m.ClearAppSdk()
		return nil
	}
	return fmt.Errorf("unknown ActiveCodeInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActiveCodeInfoMutation) ResetEdge(name string) error {
	switch name {
	case activecodeinfo.EdgeAppSdk:
		m.ResetAppSdk()
		return nil
	}
	return fmt.Errorf("unknown ActiveCodeInfo edge %s", name)
}

// AppInfoMutation represents an operation that mutates the AppInfo nodes in the graph.
type AppInfoMutation struct {
	config
	op                Op
	typ               string
	id                *string
	created_at        *time.Time
	updated_at        *time.Time
	user_id           *string
	app_name          *string
	summary           *string
	app_category      *int64
	addapp_category   *int64
	use_industry      *int64
	adduse_industry   *int64
	app_category_name *string
	use_industry_name *string
	app_key           *string
	app_secret        *string
	clearedFields     map[string]struct{}
	app_sdk           map[uuid.UUID]struct{}
	removedapp_sdk    map[uuid.UUID]struct{}
	clearedapp_sdk    bool
	done              bool
	oldValue          func(context.Context) (*AppInfo, error)
	predicates        []predicate.AppInfo
}

var _ ent.Mutation = (*AppInfoMutation)(nil)

// appinfoOption allows management of the mutation configuration using functional options.
type appinfoOption func(*AppInfoMutation)

// newAppInfoMutation creates new mutation for the AppInfo entity.
func newAppInfoMutation(c config, op Op, opts ...appinfoOption) *AppInfoMutation {
	m := &AppInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeAppInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppInfoID sets the ID field of the mutation.
func withAppInfoID(id string) appinfoOption {
	return func(m *AppInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *AppInfo
		)
		m.oldValue = func(ctx context.Context) (*AppInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppInfo sets the old AppInfo of the mutation.
func withAppInfo(node *AppInfo) appinfoOption {
	return func(m *AppInfoMutation) {
		m.oldValue = func(context.Context) (*AppInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppInfo entities.
func (m *AppInfoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppInfoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppInfoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppInfoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppInfoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppInfoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppInfoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppInfoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *AppInfoMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AppInfoMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AppInfoMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppName sets the "app_name" field.
func (m *AppInfoMutation) SetAppName(s string) {
	m.app_name = &s
}

// AppName returns the value of the "app_name" field in the mutation.
func (m *AppInfoMutation) AppName() (r string, exists bool) {
	v := m.app_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAppName returns the old "app_name" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldAppName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppName: %w", err)
	}
	return oldValue.AppName, nil
}

// ResetAppName resets all changes to the "app_name" field.
func (m *AppInfoMutation) ResetAppName() {
	m.app_name = nil
}

// SetSummary sets the "summary" field.
func (m *AppInfoMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *AppInfoMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ResetSummary resets all changes to the "summary" field.
func (m *AppInfoMutation) ResetSummary() {
	m.summary = nil
}

// SetAppCategory sets the "app_category" field.
func (m *AppInfoMutation) SetAppCategory(i int64) {
	m.app_category = &i
	m.addapp_category = nil
}

// AppCategory returns the value of the "app_category" field in the mutation.
func (m *AppInfoMutation) AppCategory() (r int64, exists bool) {
	v := m.app_category
	if v == nil {
		return
	}
	return *v, true
}

// OldAppCategory returns the old "app_category" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldAppCategory(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppCategory: %w", err)
	}
	return oldValue.AppCategory, nil
}

// AddAppCategory adds i to the "app_category" field.
func (m *AppInfoMutation) AddAppCategory(i int64) {
	if m.addapp_category != nil {
		*m.addapp_category += i
	} else {
		m.addapp_category = &i
	}
}

// AddedAppCategory returns the value that was added to the "app_category" field in this mutation.
func (m *AppInfoMutation) AddedAppCategory() (r int64, exists bool) {
	v := m.addapp_category
	if v == nil {
		return
	}
	return *v, true
}

// ResetAppCategory resets all changes to the "app_category" field.
func (m *AppInfoMutation) ResetAppCategory() {
	m.app_category = nil
	m.addapp_category = nil
}

// SetUseIndustry sets the "use_industry" field.
func (m *AppInfoMutation) SetUseIndustry(i int64) {
	m.use_industry = &i
	m.adduse_industry = nil
}

// UseIndustry returns the value of the "use_industry" field in the mutation.
func (m *AppInfoMutation) UseIndustry() (r int64, exists bool) {
	v := m.use_industry
	if v == nil {
		return
	}
	return *v, true
}

// OldUseIndustry returns the old "use_industry" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldUseIndustry(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseIndustry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseIndustry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseIndustry: %w", err)
	}
	return oldValue.UseIndustry, nil
}

// AddUseIndustry adds i to the "use_industry" field.
func (m *AppInfoMutation) AddUseIndustry(i int64) {
	if m.adduse_industry != nil {
		*m.adduse_industry += i
	} else {
		m.adduse_industry = &i
	}
}

// AddedUseIndustry returns the value that was added to the "use_industry" field in this mutation.
func (m *AppInfoMutation) AddedUseIndustry() (r int64, exists bool) {
	v := m.adduse_industry
	if v == nil {
		return
	}
	return *v, true
}

// ResetUseIndustry resets all changes to the "use_industry" field.
func (m *AppInfoMutation) ResetUseIndustry() {
	m.use_industry = nil
	m.adduse_industry = nil
}

// SetAppCategoryName sets the "app_category_name" field.
func (m *AppInfoMutation) SetAppCategoryName(s string) {
	m.app_category_name = &s
}

// AppCategoryName returns the value of the "app_category_name" field in the mutation.
func (m *AppInfoMutation) AppCategoryName() (r string, exists bool) {
	v := m.app_category_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAppCategoryName returns the old "app_category_name" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldAppCategoryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppCategoryName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppCategoryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppCategoryName: %w", err)
	}
	return oldValue.AppCategoryName, nil
}

// ResetAppCategoryName resets all changes to the "app_category_name" field.
func (m *AppInfoMutation) ResetAppCategoryName() {
	m.app_category_name = nil
}

// SetUseIndustryName sets the "use_industry_name" field.
func (m *AppInfoMutation) SetUseIndustryName(s string) {
	m.use_industry_name = &s
}

// UseIndustryName returns the value of the "use_industry_name" field in the mutation.
func (m *AppInfoMutation) UseIndustryName() (r string, exists bool) {
	v := m.use_industry_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUseIndustryName returns the old "use_industry_name" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldUseIndustryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseIndustryName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseIndustryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseIndustryName: %w", err)
	}
	return oldValue.UseIndustryName, nil
}

// ResetUseIndustryName resets all changes to the "use_industry_name" field.
func (m *AppInfoMutation) ResetUseIndustryName() {
	m.use_industry_name = nil
}

// SetAppKey sets the "app_key" field.
func (m *AppInfoMutation) SetAppKey(s string) {
	m.app_key = &s
}

// AppKey returns the value of the "app_key" field in the mutation.
func (m *AppInfoMutation) AppKey() (r string, exists bool) {
	v := m.app_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAppKey returns the old "app_key" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldAppKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppKey: %w", err)
	}
	return oldValue.AppKey, nil
}

// ResetAppKey resets all changes to the "app_key" field.
func (m *AppInfoMutation) ResetAppKey() {
	m.app_key = nil
}

// SetAppSecret sets the "app_secret" field.
func (m *AppInfoMutation) SetAppSecret(s string) {
	m.app_secret = &s
}

// AppSecret returns the value of the "app_secret" field in the mutation.
func (m *AppInfoMutation) AppSecret() (r string, exists bool) {
	v := m.app_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldAppSecret returns the old "app_secret" field's value of the AppInfo entity.
// If the AppInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInfoMutation) OldAppSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppSecret: %w", err)
	}
	return oldValue.AppSecret, nil
}

// ResetAppSecret resets all changes to the "app_secret" field.
func (m *AppInfoMutation) ResetAppSecret() {
	m.app_secret = nil
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by ids.
func (m *AppInfoMutation) AddAppSdkIDs(ids ...uuid.UUID) {
	if m.app_sdk == nil {
		m.app_sdk = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.app_sdk[ids[i]] = struct{}{}
	}
}

// ClearAppSdk clears the "app_sdk" edge to the AppSdk entity.
func (m *AppInfoMutation) ClearAppSdk() {
	m.clearedapp_sdk = true
}

// AppSdkCleared reports if the "app_sdk" edge to the AppSdk entity was cleared.
func (m *AppInfoMutation) AppSdkCleared() bool {
	return m.clearedapp_sdk
}

// RemoveAppSdkIDs removes the "app_sdk" edge to the AppSdk entity by IDs.
func (m *AppInfoMutation) RemoveAppSdkIDs(ids ...uuid.UUID) {
	if m.removedapp_sdk == nil {
		m.removedapp_sdk = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.app_sdk, ids[i])
		m.removedapp_sdk[ids[i]] = struct{}{}
	}
}

// RemovedAppSdk returns the removed IDs of the "app_sdk" edge to the AppSdk entity.
func (m *AppInfoMutation) RemovedAppSdkIDs() (ids []uuid.UUID) {
	for id := range m.removedapp_sdk {
		ids = append(ids, id)
	}
	return
}

// AppSdkIDs returns the "app_sdk" edge IDs in the mutation.
func (m *AppInfoMutation) AppSdkIDs() (ids []uuid.UUID) {
	for id := range m.app_sdk {
		ids = append(ids, id)
	}
	return
}

// ResetAppSdk resets all changes to the "app_sdk" edge.
func (m *AppInfoMutation) ResetAppSdk() {
	m.app_sdk = nil
	m.clearedapp_sdk = false
	m.removedapp_sdk = nil
}

// Where appends a list predicates to the AppInfoMutation builder.
func (m *AppInfoMutation) Where(ps ...predicate.AppInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AppInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AppInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AppInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AppInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AppInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AppInfo).
func (m *AppInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppInfoMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, appinfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appinfo.FieldUpdatedAt)
	}
	if m.user_id != nil {
		fields = append(fields, appinfo.FieldUserID)
	}
	if m.app_name != nil {
		fields = append(fields, appinfo.FieldAppName)
	}
	if m.summary != nil {
		fields = append(fields, appinfo.FieldSummary)
	}
	if m.app_category != nil {
		fields = append(fields, appinfo.FieldAppCategory)
	}
	if m.use_industry != nil {
		fields = append(fields, appinfo.FieldUseIndustry)
	}
	if m.app_category_name != nil {
		fields = append(fields, appinfo.FieldAppCategoryName)
	}
	if m.use_industry_name != nil {
		fields = append(fields, appinfo.FieldUseIndustryName)
	}
	if m.app_key != nil {
		fields = append(fields, appinfo.FieldAppKey)
	}
	if m.app_secret != nil {
		fields = append(fields, appinfo.FieldAppSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appinfo.FieldCreatedAt:
		return m.CreatedAt()
	case appinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case appinfo.FieldUserID:
		return m.UserID()
	case appinfo.FieldAppName:
		return m.AppName()
	case appinfo.FieldSummary:
		return m.Summary()
	case appinfo.FieldAppCategory:
		return m.AppCategory()
	case appinfo.FieldUseIndustry:
		return m.UseIndustry()
	case appinfo.FieldAppCategoryName:
		return m.AppCategoryName()
	case appinfo.FieldUseIndustryName:
		return m.UseIndustryName()
	case appinfo.FieldAppKey:
		return m.AppKey()
	case appinfo.FieldAppSecret:
		return m.AppSecret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appinfo.FieldUserID:
		return m.OldUserID(ctx)
	case appinfo.FieldAppName:
		return m.OldAppName(ctx)
	case appinfo.FieldSummary:
		return m.OldSummary(ctx)
	case appinfo.FieldAppCategory:
		return m.OldAppCategory(ctx)
	case appinfo.FieldUseIndustry:
		return m.OldUseIndustry(ctx)
	case appinfo.FieldAppCategoryName:
		return m.OldAppCategoryName(ctx)
	case appinfo.FieldUseIndustryName:
		return m.OldUseIndustryName(ctx)
	case appinfo.FieldAppKey:
		return m.OldAppKey(ctx)
	case appinfo.FieldAppSecret:
		return m.OldAppSecret(ctx)
	}
	return nil, fmt.Errorf("unknown AppInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appinfo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appinfo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appinfo.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case appinfo.FieldAppName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppName(v)
		return nil
	case appinfo.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case appinfo.FieldAppCategory:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppCategory(v)
		return nil
	case appinfo.FieldUseIndustry:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseIndustry(v)
		return nil
	case appinfo.FieldAppCategoryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppCategoryName(v)
		return nil
	case appinfo.FieldUseIndustryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseIndustryName(v)
		return nil
	case appinfo.FieldAppKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppKey(v)
		return nil
	case appinfo.FieldAppSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppSecret(v)
		return nil
	}
	return fmt.Errorf("unknown AppInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppInfoMutation) AddedFields() []string {
	var fields []string
	if m.addapp_category != nil {
		fields = append(fields, appinfo.FieldAppCategory)
	}
	if m.adduse_industry != nil {
		fields = append(fields, appinfo.FieldUseIndustry)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appinfo.FieldAppCategory:
		return m.AddedAppCategory()
	case appinfo.FieldUseIndustry:
		return m.AddedUseIndustry()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appinfo.FieldAppCategory:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAppCategory(v)
		return nil
	case appinfo.FieldUseIndustry:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUseIndustry(v)
		return nil
	}
	return fmt.Errorf("unknown AppInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppInfoMutation) ResetField(name string) error {
	switch name {
	case appinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appinfo.FieldUserID:
		m.ResetUserID()
		return nil
	case appinfo.FieldAppName:
		m.ResetAppName()
		return nil
	case appinfo.FieldSummary:
		m.ResetSummary()
		return nil
	case appinfo.FieldAppCategory:
		m.ResetAppCategory()
		return nil
	case appinfo.FieldUseIndustry:
		m.ResetUseIndustry()
		return nil
	case appinfo.FieldAppCategoryName:
		m.ResetAppCategoryName()
		return nil
	case appinfo.FieldUseIndustryName:
		m.ResetUseIndustryName()
		return nil
	case appinfo.FieldAppKey:
		m.ResetAppKey()
		return nil
	case appinfo.FieldAppSecret:
		m.ResetAppSecret()
		return nil
	}
	return fmt.Errorf("unknown AppInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.app_sdk != nil {
		edges = append(edges, appinfo.EdgeAppSdk)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case appinfo.EdgeAppSdk:
		ids := make([]ent.Value, 0, len(m.app_sdk))
		for id := range m.app_sdk {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedapp_sdk != nil {
		edges = append(edges, appinfo.EdgeAppSdk)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case appinfo.EdgeAppSdk:
		ids := make([]ent.Value, 0, len(m.removedapp_sdk))
		for id := range m.removedapp_sdk {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapp_sdk {
		edges = append(edges, appinfo.EdgeAppSdk)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case appinfo.EdgeAppSdk:
		return m.clearedapp_sdk
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AppInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppInfoMutation) ResetEdge(name string) error {
	switch name {
	case appinfo.EdgeAppSdk:
		m.ResetAppSdk()
		return nil
	}
	return fmt.Errorf("unknown AppInfo edge %s", name)
}

// AppSdkMutation represents an operation that mutates the AppSdk nodes in the graph.
type AppSdkMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	sdk_key            *string
	clearedFields      map[string]struct{}
	active_code        map[uuid.UUID]struct{}
	removedactive_code map[uuid.UUID]struct{}
	clearedactive_code bool
	app_info           *string
	clearedapp_info    bool
	sdk_info           *string
	clearedsdk_info    bool
	done               bool
	oldValue           func(context.Context) (*AppSdk, error)
	predicates         []predicate.AppSdk
}

var _ ent.Mutation = (*AppSdkMutation)(nil)

// appsdkOption allows management of the mutation configuration using functional options.
type appsdkOption func(*AppSdkMutation)

// newAppSdkMutation creates new mutation for the AppSdk entity.
func newAppSdkMutation(c config, op Op, opts ...appsdkOption) *AppSdkMutation {
	m := &AppSdkMutation{
		config:        c,
		op:            op,
		typ:           TypeAppSdk,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppSdkID sets the ID field of the mutation.
func withAppSdkID(id uuid.UUID) appsdkOption {
	return func(m *AppSdkMutation) {
		var (
			err   error
			once  sync.Once
			value *AppSdk
		)
		m.oldValue = func(ctx context.Context) (*AppSdk, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppSdk.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppSdk sets the old AppSdk of the mutation.
func withAppSdk(node *AppSdk) appsdkOption {
	return func(m *AppSdkMutation) {
		m.oldValue = func(context.Context) (*AppSdk, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppSdkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppSdkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppSdk entities.
func (m *AppSdkMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppSdkMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppSdkMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppSdk.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppSdkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppSdkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppSdk entity.
// If the AppSdk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSdkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppSdkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppSdkMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppSdkMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppSdk entity.
// If the AppSdk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSdkMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppSdkMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetApp sets the "app" field.
func (m *AppSdkMutation) SetApp(s string) {
	m.app_info = &s
}

// App returns the value of the "app" field in the mutation.
func (m *AppSdkMutation) App() (r string, exists bool) {
	v := m.app_info
	if v == nil {
		return
	}
	return *v, true
}

// OldApp returns the old "app" field's value of the AppSdk entity.
// If the AppSdk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSdkMutation) OldApp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApp: %w", err)
	}
	return oldValue.App, nil
}

// ClearApp clears the value of the "app" field.
func (m *AppSdkMutation) ClearApp() {
	m.app_info = nil
	m.clearedFields[appsdk.FieldApp] = struct{}{}
}

// AppCleared returns if the "app" field was cleared in this mutation.
func (m *AppSdkMutation) AppCleared() bool {
	_, ok := m.clearedFields[appsdk.FieldApp]
	return ok
}

// ResetApp resets all changes to the "app" field.
func (m *AppSdkMutation) ResetApp() {
	m.app_info = nil
	delete(m.clearedFields, appsdk.FieldApp)
}

// SetSdk sets the "sdk" field.
func (m *AppSdkMutation) SetSdk(s string) {
	m.sdk_info = &s
}

// Sdk returns the value of the "sdk" field in the mutation.
func (m *AppSdkMutation) Sdk() (r string, exists bool) {
	v := m.sdk_info
	if v == nil {
		return
	}
	return *v, true
}

// OldSdk returns the old "sdk" field's value of the AppSdk entity.
// If the AppSdk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSdkMutation) OldSdk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSdk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSdk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSdk: %w", err)
	}
	return oldValue.Sdk, nil
}

// ClearSdk clears the value of the "sdk" field.
func (m *AppSdkMutation) ClearSdk() {
	m.sdk_info = nil
	m.clearedFields[appsdk.FieldSdk] = struct{}{}
}

// SdkCleared returns if the "sdk" field was cleared in this mutation.
func (m *AppSdkMutation) SdkCleared() bool {
	_, ok := m.clearedFields[appsdk.FieldSdk]
	return ok
}

// ResetSdk resets all changes to the "sdk" field.
func (m *AppSdkMutation) ResetSdk() {
	m.sdk_info = nil
	delete(m.clearedFields, appsdk.FieldSdk)
}

// SetSdkKey sets the "sdk_key" field.
func (m *AppSdkMutation) SetSdkKey(s string) {
	m.sdk_key = &s
}

// SdkKey returns the value of the "sdk_key" field in the mutation.
func (m *AppSdkMutation) SdkKey() (r string, exists bool) {
	v := m.sdk_key
	if v == nil {
		return
	}
	return *v, true
}

// OldSdkKey returns the old "sdk_key" field's value of the AppSdk entity.
// If the AppSdk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSdkMutation) OldSdkKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSdkKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSdkKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSdkKey: %w", err)
	}
	return oldValue.SdkKey, nil
}

// ResetSdkKey resets all changes to the "sdk_key" field.
func (m *AppSdkMutation) ResetSdkKey() {
	m.sdk_key = nil
}

// AddActiveCodeIDs adds the "active_code" edge to the ActiveCodeInfo entity by ids.
func (m *AppSdkMutation) AddActiveCodeIDs(ids ...uuid.UUID) {
	if m.active_code == nil {
		m.active_code = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.active_code[ids[i]] = struct{}{}
	}
}

// ClearActiveCode clears the "active_code" edge to the ActiveCodeInfo entity.
func (m *AppSdkMutation) ClearActiveCode() {
	m.clearedactive_code = true
}

// ActiveCodeCleared reports if the "active_code" edge to the ActiveCodeInfo entity was cleared.
func (m *AppSdkMutation) ActiveCodeCleared() bool {
	return m.clearedactive_code
}

// RemoveActiveCodeIDs removes the "active_code" edge to the ActiveCodeInfo entity by IDs.
func (m *AppSdkMutation) RemoveActiveCodeIDs(ids ...uuid.UUID) {
	if m.removedactive_code == nil {
		m.removedactive_code = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.active_code, ids[i])
		m.removedactive_code[ids[i]] = struct{}{}
	}
}

// RemovedActiveCode returns the removed IDs of the "active_code" edge to the ActiveCodeInfo entity.
func (m *AppSdkMutation) RemovedActiveCodeIDs() (ids []uuid.UUID) {
	for id := range m.removedactive_code {
		ids = append(ids, id)
	}
	return
}

// ActiveCodeIDs returns the "active_code" edge IDs in the mutation.
func (m *AppSdkMutation) ActiveCodeIDs() (ids []uuid.UUID) {
	for id := range m.active_code {
		ids = append(ids, id)
	}
	return
}

// ResetActiveCode resets all changes to the "active_code" edge.
func (m *AppSdkMutation) ResetActiveCode() {
	m.active_code = nil
	m.clearedactive_code = false
	m.removedactive_code = nil
}

// SetAppInfoID sets the "app_info" edge to the AppInfo entity by id.
func (m *AppSdkMutation) SetAppInfoID(id string) {
	m.app_info = &id
}

// ClearAppInfo clears the "app_info" edge to the AppInfo entity.
func (m *AppSdkMutation) ClearAppInfo() {
	m.clearedapp_info = true
	m.clearedFields[appsdk.FieldApp] = struct{}{}
}

// AppInfoCleared reports if the "app_info" edge to the AppInfo entity was cleared.
func (m *AppSdkMutation) AppInfoCleared() bool {
	return m.AppCleared() || m.clearedapp_info
}

// AppInfoID returns the "app_info" edge ID in the mutation.
func (m *AppSdkMutation) AppInfoID() (id string, exists bool) {
	if m.app_info != nil {
		return *m.app_info, true
	}
	return
}

// AppInfoIDs returns the "app_info" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AppInfoID instead. It exists only for internal usage by the builders.
func (m *AppSdkMutation) AppInfoIDs() (ids []string) {
	if id := m.app_info; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAppInfo resets all changes to the "app_info" edge.
func (m *AppSdkMutation) ResetAppInfo() {
	m.app_info = nil
	m.clearedapp_info = false
}

// SetSdkInfoID sets the "sdk_info" edge to the SdkInfo entity by id.
func (m *AppSdkMutation) SetSdkInfoID(id string) {
	m.sdk_info = &id
}

// ClearSdkInfo clears the "sdk_info" edge to the SdkInfo entity.
func (m *AppSdkMutation) ClearSdkInfo() {
	m.clearedsdk_info = true
	m.clearedFields[appsdk.FieldSdk] = struct{}{}
}

// SdkInfoCleared reports if the "sdk_info" edge to the SdkInfo entity was cleared.
func (m *AppSdkMutation) SdkInfoCleared() bool {
	return m.SdkCleared() || m.clearedsdk_info
}

// SdkInfoID returns the "sdk_info" edge ID in the mutation.
func (m *AppSdkMutation) SdkInfoID() (id string, exists bool) {
	if m.sdk_info != nil {
		return *m.sdk_info, true
	}
	return
}

// SdkInfoIDs returns the "sdk_info" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SdkInfoID instead. It exists only for internal usage by the builders.
func (m *AppSdkMutation) SdkInfoIDs() (ids []string) {
	if id := m.sdk_info; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSdkInfo resets all changes to the "sdk_info" edge.
func (m *AppSdkMutation) ResetSdkInfo() {
	m.sdk_info = nil
	m.clearedsdk_info = false
}

// Where appends a list predicates to the AppSdkMutation builder.
func (m *AppSdkMutation) Where(ps ...predicate.AppSdk) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AppSdkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AppSdkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AppSdk, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AppSdkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AppSdkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AppSdk).
func (m *AppSdkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppSdkMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, appsdk.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appsdk.FieldUpdatedAt)
	}
	if m.app_info != nil {
		fields = append(fields, appsdk.FieldApp)
	}
	if m.sdk_info != nil {
		fields = append(fields, appsdk.FieldSdk)
	}
	if m.sdk_key != nil {
		fields = append(fields, appsdk.FieldSdkKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppSdkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appsdk.FieldCreatedAt:
		return m.CreatedAt()
	case appsdk.FieldUpdatedAt:
		return m.UpdatedAt()
	case appsdk.FieldApp:
		return m.App()
	case appsdk.FieldSdk:
		return m.Sdk()
	case appsdk.FieldSdkKey:
		return m.SdkKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppSdkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appsdk.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appsdk.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appsdk.FieldApp:
		return m.OldApp(ctx)
	case appsdk.FieldSdk:
		return m.OldSdk(ctx)
	case appsdk.FieldSdkKey:
		return m.OldSdkKey(ctx)
	}
	return nil, fmt.Errorf("unknown AppSdk field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppSdkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appsdk.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appsdk.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appsdk.FieldApp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApp(v)
		return nil
	case appsdk.FieldSdk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSdk(v)
		return nil
	case appsdk.FieldSdkKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSdkKey(v)
		return nil
	}
	return fmt.Errorf("unknown AppSdk field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppSdkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppSdkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppSdkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AppSdk numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppSdkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(appsdk.FieldApp) {
		fields = append(fields, appsdk.FieldApp)
	}
	if m.FieldCleared(appsdk.FieldSdk) {
		fields = append(fields, appsdk.FieldSdk)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppSdkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppSdkMutation) ClearField(name string) error {
	switch name {
	case appsdk.FieldApp:
		m.ClearApp()
		return nil
	case appsdk.FieldSdk:
		m.ClearSdk()
		return nil
	}
	return fmt.Errorf("unknown AppSdk nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppSdkMutation) ResetField(name string) error {
	switch name {
	case appsdk.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appsdk.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appsdk.FieldApp:
		m.ResetApp()
		return nil
	case appsdk.FieldSdk:
		m.ResetSdk()
		return nil
	case appsdk.FieldSdkKey:
		m.ResetSdkKey()
		return nil
	}
	return fmt.Errorf("unknown AppSdk field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppSdkMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.active_code != nil {
		edges = append(edges, appsdk.EdgeActiveCode)
	}
	if m.app_info != nil {
		edges = append(edges, appsdk.EdgeAppInfo)
	}
	if m.sdk_info != nil {
		edges = append(edges, appsdk.EdgeSdkInfo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppSdkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case appsdk.EdgeActiveCode:
		ids := make([]ent.Value, 0, len(m.active_code))
		for id := range m.active_code {
			ids = append(ids, id)
		}
		return ids
	case appsdk.EdgeAppInfo:
		if id := m.app_info; id != nil {
			return []ent.Value{*id}
		}
	case appsdk.EdgeSdkInfo:
		if id := m.sdk_info; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppSdkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedactive_code != nil {
		edges = append(edges, appsdk.EdgeActiveCode)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppSdkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case appsdk.EdgeActiveCode:
		ids := make([]ent.Value, 0, len(m.removedactive_code))
		for id := range m.removedactive_code {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppSdkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedactive_code {
		edges = append(edges, appsdk.EdgeActiveCode)
	}
	if m.clearedapp_info {
		edges = append(edges, appsdk.EdgeAppInfo)
	}
	if m.clearedsdk_info {
		edges = append(edges, appsdk.EdgeSdkInfo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppSdkMutation) EdgeCleared(name string) bool {
	switch name {
	case appsdk.EdgeActiveCode:
		return m.clearedactive_code
	case appsdk.EdgeAppInfo:
		return m.clearedapp_info
	case appsdk.EdgeSdkInfo:
		return m.clearedsdk_info
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppSdkMutation) ClearEdge(name string) error {
	switch name {
	case appsdk.EdgeAppInfo:
		m.ClearAppInfo()
		return nil
	case appsdk.EdgeSdkInfo:
		m.ClearSdkInfo()
		return nil
	}
	return fmt.Errorf("unknown AppSdk unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppSdkMutation) ResetEdge(name string) error {
	switch name {
	case appsdk.EdgeActiveCode:
		m.ResetActiveCode()
		return nil
	case appsdk.EdgeAppInfo:
		m.ResetAppInfo()
		return nil
	case appsdk.EdgeSdkInfo:
		m.ResetSdkInfo()
		return nil
	}
	return fmt.Errorf("unknown AppSdk edge %s", name)
}

// CategoryInfoMutation represents an operation that mutates the CategoryInfo nodes in the graph.
type CategoryInfoMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CategoryInfo, error)
	predicates    []predicate.CategoryInfo
}

var _ ent.Mutation = (*CategoryInfoMutation)(nil)

// categoryinfoOption allows management of the mutation configuration using functional options.
type categoryinfoOption func(*CategoryInfoMutation)

// newCategoryInfoMutation creates new mutation for the CategoryInfo entity.
func newCategoryInfoMutation(c config, op Op, opts ...categoryinfoOption) *CategoryInfoMutation {
	m := &CategoryInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeCategoryInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryInfoID sets the ID field of the mutation.
func withCategoryInfoID(id uint64) categoryinfoOption {
	return func(m *CategoryInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *CategoryInfo
		)
		m.oldValue = func(ctx context.Context) (*CategoryInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CategoryInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategoryInfo sets the old CategoryInfo of the mutation.
func withCategoryInfo(node *CategoryInfo) categoryinfoOption {
	return func(m *CategoryInfoMutation) {
		m.oldValue = func(context.Context) (*CategoryInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CategoryInfo entities.
func (m *CategoryInfoMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryInfoMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryInfoMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CategoryInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CategoryInfoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CategoryInfoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CategoryInfo entity.
// If the CategoryInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryInfoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CategoryInfoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CategoryInfoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CategoryInfoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CategoryInfo entity.
// If the CategoryInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryInfoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CategoryInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *CategoryInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CategoryInfo entity.
// If the CategoryInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryInfoMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the CategoryInfoMutation builder.
func (m *CategoryInfoMutation) Where(ps ...predicate.CategoryInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CategoryInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CategoryInfo).
func (m *CategoryInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryInfoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, categoryinfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, categoryinfo.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, categoryinfo.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case categoryinfo.FieldCreatedAt:
		return m.CreatedAt()
	case categoryinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case categoryinfo.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case categoryinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case categoryinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case categoryinfo.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown CategoryInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case categoryinfo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case categoryinfo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case categoryinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown CategoryInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CategoryInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CategoryInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryInfoMutation) ResetField(name string) error {
	switch name {
	case categoryinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case categoryinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case categoryinfo.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown CategoryInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CategoryInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CategoryInfo edge %s", name)
}

// IndustryInfoMutation represents an operation that mutates the IndustryInfo nodes in the graph.
type IndustryInfoMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*IndustryInfo, error)
	predicates    []predicate.IndustryInfo
}

var _ ent.Mutation = (*IndustryInfoMutation)(nil)

// industryinfoOption allows management of the mutation configuration using functional options.
type industryinfoOption func(*IndustryInfoMutation)

// newIndustryInfoMutation creates new mutation for the IndustryInfo entity.
func newIndustryInfoMutation(c config, op Op, opts ...industryinfoOption) *IndustryInfoMutation {
	m := &IndustryInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeIndustryInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIndustryInfoID sets the ID field of the mutation.
func withIndustryInfoID(id uint64) industryinfoOption {
	return func(m *IndustryInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *IndustryInfo
		)
		m.oldValue = func(ctx context.Context) (*IndustryInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IndustryInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIndustryInfo sets the old IndustryInfo of the mutation.
func withIndustryInfo(node *IndustryInfo) industryinfoOption {
	return func(m *IndustryInfoMutation) {
		m.oldValue = func(context.Context) (*IndustryInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IndustryInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IndustryInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IndustryInfo entities.
func (m *IndustryInfoMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IndustryInfoMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IndustryInfoMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IndustryInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IndustryInfoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IndustryInfoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IndustryInfo entity.
// If the IndustryInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IndustryInfoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IndustryInfoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IndustryInfoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IndustryInfoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IndustryInfo entity.
// If the IndustryInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IndustryInfoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IndustryInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *IndustryInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IndustryInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the IndustryInfo entity.
// If the IndustryInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IndustryInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IndustryInfoMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the IndustryInfoMutation builder.
func (m *IndustryInfoMutation) Where(ps ...predicate.IndustryInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IndustryInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IndustryInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IndustryInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IndustryInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IndustryInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IndustryInfo).
func (m *IndustryInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IndustryInfoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, industryinfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, industryinfo.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, industryinfo.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IndustryInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case industryinfo.FieldCreatedAt:
		return m.CreatedAt()
	case industryinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case industryinfo.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IndustryInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case industryinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case industryinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case industryinfo.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown IndustryInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IndustryInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case industryinfo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case industryinfo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case industryinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown IndustryInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IndustryInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IndustryInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IndustryInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IndustryInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IndustryInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IndustryInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IndustryInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IndustryInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IndustryInfoMutation) ResetField(name string) error {
	switch name {
	case industryinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case industryinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case industryinfo.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown IndustryInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IndustryInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IndustryInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IndustryInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IndustryInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IndustryInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IndustryInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IndustryInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown IndustryInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IndustryInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown IndustryInfo edge %s", name)
}

// SdkInfoMutation represents an operation that mutates the SdkInfo nodes in the graph.
type SdkInfoMutation struct {
	config
	op             Op
	typ            string
	id             *string
	created_at     *time.Time
	updated_at     *time.Time
	name           *string
	avatar         *string
	desc           *string
	download_url   *string
	language       *string
	language_id    *int64
	addlanguage_id *int64
	version        *string
	clearedFields  map[string]struct{}
	app_sdk        map[uuid.UUID]struct{}
	removedapp_sdk map[uuid.UUID]struct{}
	clearedapp_sdk bool
	done           bool
	oldValue       func(context.Context) (*SdkInfo, error)
	predicates     []predicate.SdkInfo
}

var _ ent.Mutation = (*SdkInfoMutation)(nil)

// sdkinfoOption allows management of the mutation configuration using functional options.
type sdkinfoOption func(*SdkInfoMutation)

// newSdkInfoMutation creates new mutation for the SdkInfo entity.
func newSdkInfoMutation(c config, op Op, opts ...sdkinfoOption) *SdkInfoMutation {
	m := &SdkInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeSdkInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSdkInfoID sets the ID field of the mutation.
func withSdkInfoID(id string) sdkinfoOption {
	return func(m *SdkInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *SdkInfo
		)
		m.oldValue = func(ctx context.Context) (*SdkInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SdkInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSdkInfo sets the old SdkInfo of the mutation.
func withSdkInfo(node *SdkInfo) sdkinfoOption {
	return func(m *SdkInfoMutation) {
		m.oldValue = func(context.Context) (*SdkInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SdkInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SdkInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SdkInfo entities.
func (m *SdkInfoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SdkInfoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SdkInfoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SdkInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SdkInfoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SdkInfoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SdkInfoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SdkInfoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SdkInfoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SdkInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *SdkInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SdkInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SdkInfoMutation) ResetName() {
	m.name = nil
}

// SetAvatar sets the "avatar" field.
func (m *SdkInfoMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *SdkInfoMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *SdkInfoMutation) ResetAvatar() {
	m.avatar = nil
}

// SetDesc sets the "desc" field.
func (m *SdkInfoMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *SdkInfoMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *SdkInfoMutation) ResetDesc() {
	m.desc = nil
}

// SetDownloadURL sets the "download_url" field.
func (m *SdkInfoMutation) SetDownloadURL(s string) {
	m.download_url = &s
}

// DownloadURL returns the value of the "download_url" field in the mutation.
func (m *SdkInfoMutation) DownloadURL() (r string, exists bool) {
	v := m.download_url
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadURL returns the old "download_url" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldDownloadURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadURL: %w", err)
	}
	return oldValue.DownloadURL, nil
}

// ResetDownloadURL resets all changes to the "download_url" field.
func (m *SdkInfoMutation) ResetDownloadURL() {
	m.download_url = nil
}

// SetLanguage sets the "language" field.
func (m *SdkInfoMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *SdkInfoMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *SdkInfoMutation) ResetLanguage() {
	m.language = nil
}

// SetLanguageID sets the "language_id" field.
func (m *SdkInfoMutation) SetLanguageID(i int64) {
	m.language_id = &i
	m.addlanguage_id = nil
}

// LanguageID returns the value of the "language_id" field in the mutation.
func (m *SdkInfoMutation) LanguageID() (r int64, exists bool) {
	v := m.language_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageID returns the old "language_id" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldLanguageID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageID: %w", err)
	}
	return oldValue.LanguageID, nil
}

// AddLanguageID adds i to the "language_id" field.
func (m *SdkInfoMutation) AddLanguageID(i int64) {
	if m.addlanguage_id != nil {
		*m.addlanguage_id += i
	} else {
		m.addlanguage_id = &i
	}
}

// AddedLanguageID returns the value that was added to the "language_id" field in this mutation.
func (m *SdkInfoMutation) AddedLanguageID() (r int64, exists bool) {
	v := m.addlanguage_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetLanguageID resets all changes to the "language_id" field.
func (m *SdkInfoMutation) ResetLanguageID() {
	m.language_id = nil
	m.addlanguage_id = nil
}

// SetVersion sets the "version" field.
func (m *SdkInfoMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *SdkInfoMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the SdkInfo entity.
// If the SdkInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkInfoMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *SdkInfoMutation) ResetVersion() {
	m.version = nil
}

// AddAppSdkIDs adds the "app_sdk" edge to the AppSdk entity by ids.
func (m *SdkInfoMutation) AddAppSdkIDs(ids ...uuid.UUID) {
	if m.app_sdk == nil {
		m.app_sdk = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.app_sdk[ids[i]] = struct{}{}
	}
}

// ClearAppSdk clears the "app_sdk" edge to the AppSdk entity.
func (m *SdkInfoMutation) ClearAppSdk() {
	m.clearedapp_sdk = true
}

// AppSdkCleared reports if the "app_sdk" edge to the AppSdk entity was cleared.
func (m *SdkInfoMutation) AppSdkCleared() bool {
	return m.clearedapp_sdk
}

// RemoveAppSdkIDs removes the "app_sdk" edge to the AppSdk entity by IDs.
func (m *SdkInfoMutation) RemoveAppSdkIDs(ids ...uuid.UUID) {
	if m.removedapp_sdk == nil {
		m.removedapp_sdk = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.app_sdk, ids[i])
		m.removedapp_sdk[ids[i]] = struct{}{}
	}
}

// RemovedAppSdk returns the removed IDs of the "app_sdk" edge to the AppSdk entity.
func (m *SdkInfoMutation) RemovedAppSdkIDs() (ids []uuid.UUID) {
	for id := range m.removedapp_sdk {
		ids = append(ids, id)
	}
	return
}

// AppSdkIDs returns the "app_sdk" edge IDs in the mutation.
func (m *SdkInfoMutation) AppSdkIDs() (ids []uuid.UUID) {
	for id := range m.app_sdk {
		ids = append(ids, id)
	}
	return
}

// ResetAppSdk resets all changes to the "app_sdk" edge.
func (m *SdkInfoMutation) ResetAppSdk() {
	m.app_sdk = nil
	m.clearedapp_sdk = false
	m.removedapp_sdk = nil
}

// Where appends a list predicates to the SdkInfoMutation builder.
func (m *SdkInfoMutation) Where(ps ...predicate.SdkInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SdkInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SdkInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SdkInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SdkInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SdkInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SdkInfo).
func (m *SdkInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SdkInfoMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, sdkinfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sdkinfo.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, sdkinfo.FieldName)
	}
	if m.avatar != nil {
		fields = append(fields, sdkinfo.FieldAvatar)
	}
	if m.desc != nil {
		fields = append(fields, sdkinfo.FieldDesc)
	}
	if m.download_url != nil {
		fields = append(fields, sdkinfo.FieldDownloadURL)
	}
	if m.language != nil {
		fields = append(fields, sdkinfo.FieldLanguage)
	}
	if m.language_id != nil {
		fields = append(fields, sdkinfo.FieldLanguageID)
	}
	if m.version != nil {
		fields = append(fields, sdkinfo.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SdkInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sdkinfo.FieldCreatedAt:
		return m.CreatedAt()
	case sdkinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case sdkinfo.FieldName:
		return m.Name()
	case sdkinfo.FieldAvatar:
		return m.Avatar()
	case sdkinfo.FieldDesc:
		return m.Desc()
	case sdkinfo.FieldDownloadURL:
		return m.DownloadURL()
	case sdkinfo.FieldLanguage:
		return m.Language()
	case sdkinfo.FieldLanguageID:
		return m.LanguageID()
	case sdkinfo.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SdkInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sdkinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sdkinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sdkinfo.FieldName:
		return m.OldName(ctx)
	case sdkinfo.FieldAvatar:
		return m.OldAvatar(ctx)
	case sdkinfo.FieldDesc:
		return m.OldDesc(ctx)
	case sdkinfo.FieldDownloadURL:
		return m.OldDownloadURL(ctx)
	case sdkinfo.FieldLanguage:
		return m.OldLanguage(ctx)
	case sdkinfo.FieldLanguageID:
		return m.OldLanguageID(ctx)
	case sdkinfo.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown SdkInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SdkInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sdkinfo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sdkinfo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sdkinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sdkinfo.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case sdkinfo.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case sdkinfo.FieldDownloadURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadURL(v)
		return nil
	case sdkinfo.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case sdkinfo.FieldLanguageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageID(v)
		return nil
	case sdkinfo.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown SdkInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SdkInfoMutation) AddedFields() []string {
	var fields []string
	if m.addlanguage_id != nil {
		fields = append(fields, sdkinfo.FieldLanguageID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SdkInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sdkinfo.FieldLanguageID:
		return m.AddedLanguageID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SdkInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sdkinfo.FieldLanguageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLanguageID(v)
		return nil
	}
	return fmt.Errorf("unknown SdkInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SdkInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SdkInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SdkInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SdkInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SdkInfoMutation) ResetField(name string) error {
	switch name {
	case sdkinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sdkinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sdkinfo.FieldName:
		m.ResetName()
		return nil
	case sdkinfo.FieldAvatar:
		m.ResetAvatar()
		return nil
	case sdkinfo.FieldDesc:
		m.ResetDesc()
		return nil
	case sdkinfo.FieldDownloadURL:
		m.ResetDownloadURL()
		return nil
	case sdkinfo.FieldLanguage:
		m.ResetLanguage()
		return nil
	case sdkinfo.FieldLanguageID:
		m.ResetLanguageID()
		return nil
	case sdkinfo.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown SdkInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SdkInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.app_sdk != nil {
		edges = append(edges, sdkinfo.EdgeAppSdk)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SdkInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sdkinfo.EdgeAppSdk:
		ids := make([]ent.Value, 0, len(m.app_sdk))
		for id := range m.app_sdk {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SdkInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedapp_sdk != nil {
		edges = append(edges, sdkinfo.EdgeAppSdk)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SdkInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sdkinfo.EdgeAppSdk:
		ids := make([]ent.Value, 0, len(m.removedapp_sdk))
		for id := range m.removedapp_sdk {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SdkInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapp_sdk {
		edges = append(edges, sdkinfo.EdgeAppSdk)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SdkInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case sdkinfo.EdgeAppSdk:
		return m.clearedapp_sdk
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SdkInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SdkInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SdkInfoMutation) ResetEdge(name string) error {
	switch name {
	case sdkinfo.EdgeAppSdk:
		m.ResetAppSdk()
		return nil
	}
	return fmt.Errorf("unknown SdkInfo edge %s", name)
}

// SdkUsageMutation represents an operation that mutates the SdkUsage nodes in the graph.
type SdkUsageMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	user_id       *string
	all           *int64
	addall        *int64
	used          *int64
	addused       *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SdkUsage, error)
	predicates    []predicate.SdkUsage
}

var _ ent.Mutation = (*SdkUsageMutation)(nil)

// sdkusageOption allows management of the mutation configuration using functional options.
type sdkusageOption func(*SdkUsageMutation)

// newSdkUsageMutation creates new mutation for the SdkUsage entity.
func newSdkUsageMutation(c config, op Op, opts ...sdkusageOption) *SdkUsageMutation {
	m := &SdkUsageMutation{
		config:        c,
		op:            op,
		typ:           TypeSdkUsage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSdkUsageID sets the ID field of the mutation.
func withSdkUsageID(id uuid.UUID) sdkusageOption {
	return func(m *SdkUsageMutation) {
		var (
			err   error
			once  sync.Once
			value *SdkUsage
		)
		m.oldValue = func(ctx context.Context) (*SdkUsage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SdkUsage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSdkUsage sets the old SdkUsage of the mutation.
func withSdkUsage(node *SdkUsage) sdkusageOption {
	return func(m *SdkUsageMutation) {
		m.oldValue = func(context.Context) (*SdkUsage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SdkUsageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SdkUsageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SdkUsage entities.
func (m *SdkUsageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SdkUsageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SdkUsageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SdkUsage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SdkUsageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SdkUsageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SdkUsage entity.
// If the SdkUsage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkUsageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SdkUsageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SdkUsageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SdkUsageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SdkUsage entity.
// If the SdkUsage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkUsageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SdkUsageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *SdkUsageMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SdkUsageMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SdkUsage entity.
// If the SdkUsage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkUsageMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SdkUsageMutation) ResetUserID() {
	m.user_id = nil
}

// SetAll sets the "all" field.
func (m *SdkUsageMutation) SetAll(i int64) {
	m.all = &i
	m.addall = nil
}

// All returns the value of the "all" field in the mutation.
func (m *SdkUsageMutation) All() (r int64, exists bool) {
	v := m.all
	if v == nil {
		return
	}
	return *v, true
}

// OldAll returns the old "all" field's value of the SdkUsage entity.
// If the SdkUsage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkUsageMutation) OldAll(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAll is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAll requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAll: %w", err)
	}
	return oldValue.All, nil
}

// AddAll adds i to the "all" field.
func (m *SdkUsageMutation) AddAll(i int64) {
	if m.addall != nil {
		*m.addall += i
	} else {
		m.addall = &i
	}
}

// AddedAll returns the value that was added to the "all" field in this mutation.
func (m *SdkUsageMutation) AddedAll() (r int64, exists bool) {
	v := m.addall
	if v == nil {
		return
	}
	return *v, true
}

// ResetAll resets all changes to the "all" field.
func (m *SdkUsageMutation) ResetAll() {
	m.all = nil
	m.addall = nil
}

// SetUsed sets the "used" field.
func (m *SdkUsageMutation) SetUsed(i int64) {
	m.used = &i
	m.addused = nil
}

// Used returns the value of the "used" field in the mutation.
func (m *SdkUsageMutation) Used() (r int64, exists bool) {
	v := m.used
	if v == nil {
		return
	}
	return *v, true
}

// OldUsed returns the old "used" field's value of the SdkUsage entity.
// If the SdkUsage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SdkUsageMutation) OldUsed(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsed: %w", err)
	}
	return oldValue.Used, nil
}

// AddUsed adds i to the "used" field.
func (m *SdkUsageMutation) AddUsed(i int64) {
	if m.addused != nil {
		*m.addused += i
	} else {
		m.addused = &i
	}
}

// AddedUsed returns the value that was added to the "used" field in this mutation.
func (m *SdkUsageMutation) AddedUsed() (r int64, exists bool) {
	v := m.addused
	if v == nil {
		return
	}
	return *v, true
}

// ResetUsed resets all changes to the "used" field.
func (m *SdkUsageMutation) ResetUsed() {
	m.used = nil
	m.addused = nil
}

// Where appends a list predicates to the SdkUsageMutation builder.
func (m *SdkUsageMutation) Where(ps ...predicate.SdkUsage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SdkUsageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SdkUsageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SdkUsage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SdkUsageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SdkUsageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SdkUsage).
func (m *SdkUsageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SdkUsageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, sdkusage.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sdkusage.FieldUpdatedAt)
	}
	if m.user_id != nil {
		fields = append(fields, sdkusage.FieldUserID)
	}
	if m.all != nil {
		fields = append(fields, sdkusage.FieldAll)
	}
	if m.used != nil {
		fields = append(fields, sdkusage.FieldUsed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SdkUsageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sdkusage.FieldCreatedAt:
		return m.CreatedAt()
	case sdkusage.FieldUpdatedAt:
		return m.UpdatedAt()
	case sdkusage.FieldUserID:
		return m.UserID()
	case sdkusage.FieldAll:
		return m.All()
	case sdkusage.FieldUsed:
		return m.Used()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SdkUsageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sdkusage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sdkusage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sdkusage.FieldUserID:
		return m.OldUserID(ctx)
	case sdkusage.FieldAll:
		return m.OldAll(ctx)
	case sdkusage.FieldUsed:
		return m.OldUsed(ctx)
	}
	return nil, fmt.Errorf("unknown SdkUsage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SdkUsageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sdkusage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sdkusage.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sdkusage.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sdkusage.FieldAll:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAll(v)
		return nil
	case sdkusage.FieldUsed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsed(v)
		return nil
	}
	return fmt.Errorf("unknown SdkUsage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SdkUsageMutation) AddedFields() []string {
	var fields []string
	if m.addall != nil {
		fields = append(fields, sdkusage.FieldAll)
	}
	if m.addused != nil {
		fields = append(fields, sdkusage.FieldUsed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SdkUsageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sdkusage.FieldAll:
		return m.AddedAll()
	case sdkusage.FieldUsed:
		return m.AddedUsed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SdkUsageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sdkusage.FieldAll:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAll(v)
		return nil
	case sdkusage.FieldUsed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUsed(v)
		return nil
	}
	return fmt.Errorf("unknown SdkUsage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SdkUsageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SdkUsageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SdkUsageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SdkUsage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SdkUsageMutation) ResetField(name string) error {
	switch name {
	case sdkusage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sdkusage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sdkusage.FieldUserID:
		m.ResetUserID()
		return nil
	case sdkusage.FieldAll:
		m.ResetAll()
		return nil
	case sdkusage.FieldUsed:
		m.ResetUsed()
		return nil
	}
	return fmt.Errorf("unknown SdkUsage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SdkUsageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SdkUsageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SdkUsageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SdkUsageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SdkUsageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SdkUsageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SdkUsageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SdkUsage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SdkUsageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SdkUsage edge %s", name)
}
