// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/iot-synergy/openned8-rpc/ent/sdkinfo"
)

// SdkInfo is the model entity for the SdkInfo schema.
type SdkInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 名字
	Name string `json:"name,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 排序
	Desc int64 `json:"desc,omitempty"`
	// 下载地址
	DownloadURL string `json:"download_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SdkInfoQuery when eager-loading is set.
	Edges        SdkInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SdkInfoEdges holds the relations/edges for other nodes in the graph.
type SdkInfoEdges struct {
	// AppSdk holds the value of the app_sdk edge.
	AppSdk []*AppSdk `json:"app_sdk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppSdkOrErr returns the AppSdk value or an error if the edge
// was not loaded in eager-loading.
func (e SdkInfoEdges) AppSdkOrErr() ([]*AppSdk, error) {
	if e.loadedTypes[0] {
		return e.AppSdk, nil
	}
	return nil, &NotLoadedError{edge: "app_sdk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SdkInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sdkinfo.FieldDesc:
			values[i] = new(sql.NullInt64)
		case sdkinfo.FieldID, sdkinfo.FieldName, sdkinfo.FieldAvatar, sdkinfo.FieldDownloadURL:
			values[i] = new(sql.NullString)
		case sdkinfo.FieldCreatedAt, sdkinfo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SdkInfo fields.
func (si *SdkInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sdkinfo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				si.ID = value.String
			}
		case sdkinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				si.CreatedAt = value.Time
			}
		case sdkinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				si.UpdatedAt = value.Time
			}
		case sdkinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				si.Name = value.String
			}
		case sdkinfo.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				si.Avatar = value.String
			}
		case sdkinfo.FieldDesc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				si.Desc = value.Int64
			}
		case sdkinfo.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				si.DownloadURL = value.String
			}
		default:
			si.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SdkInfo.
// This includes values selected through modifiers, order, etc.
func (si *SdkInfo) Value(name string) (ent.Value, error) {
	return si.selectValues.Get(name)
}

// QueryAppSdk queries the "app_sdk" edge of the SdkInfo entity.
func (si *SdkInfo) QueryAppSdk() *AppSdkQuery {
	return NewSdkInfoClient(si.config).QueryAppSdk(si)
}

// Update returns a builder for updating this SdkInfo.
// Note that you need to call SdkInfo.Unwrap() before calling this method if this SdkInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *SdkInfo) Update() *SdkInfoUpdateOne {
	return NewSdkInfoClient(si.config).UpdateOne(si)
}

// Unwrap unwraps the SdkInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *SdkInfo) Unwrap() *SdkInfo {
	_tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: SdkInfo is not a transactional entity")
	}
	si.config.driver = _tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *SdkInfo) String() string {
	var builder strings.Builder
	builder.WriteString("SdkInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", si.ID))
	builder.WriteString("created_at=")
	builder.WriteString(si.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(si.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(si.Name)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(si.Avatar)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fmt.Sprintf("%v", si.Desc))
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(si.DownloadURL)
	builder.WriteByte(')')
	return builder.String()
}

// SdkInfos is a parsable slice of SdkInfo.
type SdkInfos []*SdkInfo
